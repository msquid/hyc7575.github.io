<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hyc7575 blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hyc7575.github.io/"/>
  <updated>2018-09-10T07:18:58.166Z</updated>
  <id>http://hyc7575.github.io/</id>
  
  <author>
    <name>keunhyeok jeon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>img태그 retina사이즈 대응</title>
    <link href="http://hyc7575.github.io/2018/09/10/2018-09-10-image-retina/"/>
    <id>http://hyc7575.github.io/2018/09/10/2018-09-10-image-retina/</id>
    <published>2018-09-10T06:02:41.000Z</published>
    <updated>2018-09-10T07:18:58.166Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/htmlcssposter.png"/><h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><p>img태그 사용시 특정 retina 디스플레이에서 2배수, 3배수 이미지가 적용되지 않았음.</p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>기존 retina 디스플레이의 이미지 대응을 위해서 img태그의 <code>srcset</code>이라는 어트리뷰트를 아래와 같이 사용하고 있었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"testSrc.png"</span></span></div><div class="line">     <span class="attr">srcset</span>=<span class="string">"testSrc.png 1x, testSrc@2x.png 2x, testSrc@3x.png 3x"</span></div><div class="line">     <span class="attr">alt</span>=<span class="string">"테스트 이미지"</span>&gt;</div></pre></td></tr></table></figure><p>하지만 특정 디스플레이에서 제대로 적용되지 않음을 발견하였고, 그 이유가 srcset속성은 IE, Android 5.0 미만의 버전에서 지원하지 않는다고 한다. (<a href="https://caniuse.com/#search=srcset" target="_blank" rel="external">링크</a>)<br>리서칭 결과 3가지 정도의 방안을 찾았다.</p><ul><li><ol><li>javascript를 이용하여 retina 디스플레이를 체크하고 해당 배수의 이미지로 교체</li></ol></li><li><ol><li>svg 사용</li></ol></li><li><ol><li>default 이미지를 2배 or 3배수 사용 후 원본 사이즈로 고정</li></ol></li></ul><p>세가지 다 작은 단점들이 조금씩 존재하였지만 결론부터 말하면 3번 방향으로 해결하였다.</p><p>1번의 경우 이미지 하나를 표현하기 위해 여러개의 요청을 발생시키게 되는 문제가 생길 수 있고, 2번은 IE8 미지원 및 이미지화(?)되어 버린 리소스들은 다시 작업이 필요하였고 3번은 retina가 아닌 디스플레이에서는 더 큰 용량의 이미지를 사용하여야 했다.</p><p>고민해본 결과, 매우 큰 이미지는 잘 사용하지 않는 편이여서 2배수 or 3배수 이미지를 default로 사용하기로 하였다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"testSrc@2x.png"</span></span></div><div class="line">     <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"250"</span></div><div class="line">     <span class="attr">srcset</span>=<span class="string">"testSrc.png 1x, testSrc@2x.png 2x, testSrc@3x.png 3x"</span></div><div class="line">     <span class="attr">alt</span>=<span class="string">"테스트 이미지"</span>&gt;</div></pre></td></tr></table></figure><p>추후 리소스 정리를 진행한다면, 모바일 기반 제품들은 svg로 갈아타면 좋을듯하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/htmlcssposter.png&quot;/&gt;&lt;h2 id=&quot;이슈&quot;&gt;&lt;a href=&quot;#이슈&quot; class=&quot;headerlink&quot; title=&quot;이슈&quot;&gt;&lt;/a&gt;이슈&lt;/h2&gt;&lt;p&gt;img태그 사용시 특정 retina 디스플레이에서 2배수,
      
    
    </summary>
    
      <category term="html/css" scheme="http://hyc7575.github.io/categories/html-css/"/>
    
    
      <category term="html" scheme="http://hyc7575.github.io/tags/html/"/>
    
      <category term="css" scheme="http://hyc7575.github.io/tags/css/"/>
    
      <category term="input radio" scheme="http://hyc7575.github.io/tags/input-radio/"/>
    
      <category term="custom radio" scheme="http://hyc7575.github.io/tags/custom-radio/"/>
    
  </entry>
  
  <entry>
    <title>SVG - 심심해서 만들어본 라이언</title>
    <link href="http://hyc7575.github.io/2018/04/03/2018-04-03-svg-ryan/"/>
    <id>http://hyc7575.github.io/2018/04/03/2018-04-03-svg-ryan/</id>
    <published>2018-04-03T08:02:46.000Z</published>
    <updated>2018-04-03T08:21:12.939Z</updated>
    
    <content type="html"><![CDATA[<img src="https://user-images.githubusercontent.com/14171723/38237327-ea8234e0-3761-11e8-8524-b42d30e8d834.png"/><h2 id="사용할-썸네일이-없다"><a href="#사용할-썸네일이-없다" class="headerlink" title="사용할 썸네일이 없다.."></a>사용할 썸네일이 없다..</h2><p>결국 제작한 라이언을 캡쳐하여 썸네일로 사용해 보았는데, 저작권 문제 있지 않을지 조금 걱정이..</p><h2 id="계기"><a href="#계기" class="headerlink" title="계기"></a>계기</h2><p>제목에서 언급하였듯 심심해서 만들어 보았다.<br>SVG쪽을 나중에 해봐야지 해봐야지 하고 미루어만 둔 상태이었는데, 어떤 문법을 가지고 있는지 기초 정도만 알아보자라는 생각으로 시작하게 되었다.</p><h2 id="작업-물"><a href="#작업-물" class="headerlink" title="작업(?)물"></a>작업(?)물</h2><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="pLKoYE" data-default-tab="html,result" data-user="small" data-embed-version="2" data-pen-title="SVG Ryan (라이언 만들어보기)" class="codepen">See the Pen <a href="https://codepen.io/small/pen/pLKoYE/" target="_blank" rel="external">SVG Ryan (라이언 만들어보기)</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="맺음"><a href="#맺음" class="headerlink" title="맺음"></a>맺음</h2><p>라이언의 얼굴까지는 상당히 쉽다고 느끼며 코드를 작성하였으나 몸통 부분에서 <code>path</code>를 사용하면서 부터 조금 어려움을 느낀것 같다. ( 몸통은 하지말까 라는 생각을 중간에 하기도.. )</p><p>뭔가 조금 어색하지만 나름 라이언 비슷(?)하게 생긴 결과물이 나와서 만족</p><p>javascript 변경해서 특정 이벤트를 등록하거나, css 애니메이션을 입혀보는 작업도 재미있을듯 하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://user-images.githubusercontent.com/14171723/38237327-ea8234e0-3761-11e8-8524-b42d30e8d834.png&quot;/&gt;&lt;h2 id=&quot;사용할-썸네일이-없다&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="기타" scheme="http://hyc7575.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="SVG" scheme="http://hyc7575.github.io/categories/%EA%B8%B0%ED%83%80/SVG/"/>
    
    
      <category term="html" scheme="http://hyc7575.github.io/tags/html/"/>
    
      <category term="SVG" scheme="http://hyc7575.github.io/tags/SVG/"/>
    
      <category term="ryan" scheme="http://hyc7575.github.io/tags/ryan/"/>
    
      <category term="라이언" scheme="http://hyc7575.github.io/tags/%EB%9D%BC%EC%9D%B4%EC%96%B8/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - Vue-cli를 이용한 vue 프로젝트 살펴보기 2</title>
    <link href="http://hyc7575.github.io/2018/03/22/2018-03-22-vue-cli-component/"/>
    <id>http://hyc7575.github.io/2018/03/22/2018-03-22-vue-cli-component/</id>
    <published>2018-03-22T08:18:37.000Z</published>
    <updated>2018-03-26T06:52:17.303Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><h2 id="컴포넌트-사용하기"><a href="#컴포넌트-사용하기" class="headerlink" title="컴포넌트 사용하기"></a>컴포넌트 사용하기</h2><p><a href="/2017/12/21/2017-12-21-vue-prject-example/">이전 글</a>에서 예제로 사용한 카운트 앱을 통하여 학습해봅시다.<br>카운트 앱을 2가지로 분리할 예정입니다.</p><ul><li>Count<ul><li>CountValue</li><li>CountController</li></ul></li></ul><p>첫째로 value가 표시되는 영역, 두번째로 value값을 조정하는 영역입니다.</p><p>기존 예제 ( App.vue )<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>감소<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">num</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        increment() &#123;</div><div class="line">            <span class="comment">// 증가</span></div><div class="line">            <span class="keyword">this</span>.num++;</div><div class="line">        &#125;,</div><div class="line">        decrement() &#123;</div><div class="line">            <span class="comment">// 감소</span></div><div class="line">            <span class="keyword">this</span>.num--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>위와 같던 예제를…<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Count</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">'./containers/count'</span>;</div><div class="line">　</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        Count</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>이렇게 만들 예정입니다. 일단 App.vue 를 위처럼 수정해주세요.</p><h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><p>컴포넌트와 컨테이너를 담을 폴더들을 생성합니다. 전체적인 디렉토리 구조는 아래와 같이 작성하였습니다.</p><ul><li>app<ul><li>node_modules</li><li>src<ul><li>assets</li><li><code>components</code><ul><li><code>countValue.vue</code></li><li><code>countController.vue</code></li></ul></li><li><code>containers</code><ul><li><code>count.vue</code></li></ul></li><li>App.vue</li><li>main.js</li></ul></li><li>index.html</li><li>package.json</li><li>etc…</li></ul></li></ul><p>강조된 부분이 기존 vue-cli에서 생성해주지 않은 부분으로 직접 생성해야하는 폴더, 파일 입니다.</p><h2 id="컴포넌트-작성"><a href="#컴포넌트-작성" class="headerlink" title="컴포넌트 작성"></a>컴포넌트 작성</h2><p>Count 라는 컨테이너(page)부터 살펴보도록 합시다.<br>Count 앱의 모든 기능은 이 컨테이너 안으로 들어가져 있습니다.</p><h3 id="count-vue"><a href="#count-vue" class="headerlink" title="count.vue"></a>count.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">countValue</span> <span class="attr">:cv</span>=<span class="string">"num"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">countController</span> @<span class="attr">increment</span>=<span class="string">"increment"</span> @<span class="attr">decrement</span>=<span class="string">"decrement"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> countValue <span class="keyword">from</span> <span class="string">'../components/countValue'</span>;</div><div class="line"><span class="keyword">import</span> countController <span class="keyword">from</span> <span class="string">'../components/countController'</span>;</div><div class="line">　</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        countValue,</div><div class="line">        countController</div><div class="line">    &#125;,</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">num</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        increment() &#123;</div><div class="line">            <span class="comment">// 증가</span></div><div class="line">            <span class="keyword">this</span>.num++;</div><div class="line">        &#125;,</div><div class="line">        decrement() &#123;</div><div class="line">            <span class="comment">// 감소</span></div><div class="line">            <span class="keyword">this</span>.num--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>13번 라인을 보면 <code>components</code>가 있습니다.<br>이는 이 count라는 컨테이너에서 사용할 컴포넌트들을 정의하는 부분입니다.<br>윗줄에서 import로 불러온, countValue와 countController 2가지의 컴포넌트들을 사용한다고 정의한 것이지요.</p><p>정의한 컴포넌트들은 html 영역인 template에서 사용됩니다.<br>3, 4번 라인이 해당하는 부분입니다.<br>중요한 내용은 아니지만, 저는 camel case(대문자로 연결) 방식을 사용하였으나 kebab case(하이픈으로 연결)를 권장한다는 글을 본거 같아서 언급해봅니다.</p><p>다시 예제의 컴포넌트를 봅시다.<br>현재 카운트 앱의 데이터 및 행동들은 모두 count라는 컨테이너가 가지고 있습니다. 우리는 이것들을 각 자식 컴포넌트에게 <code>props</code>를 통하여 넘겨주어야 합니다.</p><p>3번 라인, <code>:cv=&quot;num&quot;</code> cv라는 이름으로 num 데이터를 자식 컴포넌트에게 넘겨주고 있습니다. 자식 컴포넌트인 countValue는 cv를 props를 통하여 받아와야 합니다.</p><h3 id="countValue-vue"><a href="#countValue-vue" class="headerlink" title="countValue.vue"></a>countValue.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;cv&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">props</span>: [<span class="string">'cv'</span>]</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p><a href="/2017/08/31/2017-08-31-vue-component/">Vue.js - Component(컴포넌트) 1</a> 에서 설명했던 props 사용법과 동일합니다.</p><p>이제 count.vue의 4번라인을 봅시다.<br>이 부분도 이전에 설명했던 부분입니다. <a href="/2017/11/13/2017-11-13-vue-component2/#부모-자식간-통신">Vue.js - Component(컴포넌트) 2 - 부모 자식간 통신</a>의 예제에서 언급했던 기능이지요.<br>컴포넌트를 통해 커스텀 이벤트를 정의한 뒤, 자식 컴포넌트에서 <code>$emit</code>을 사용하여 부모의 이벤트를 발생시키는 방법입니다.</p><h3 id="countController-vue"><a href="#countController-vue" class="headerlink" title="countController.vue"></a>countController.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>감소<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        increment() &#123;</div><div class="line">            <span class="comment">// 부모의 increment라는 이벤트 호출</span></div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>);</div><div class="line">        &#125;,</div><div class="line">        decrement() &#123;</div><div class="line">            <span class="comment">// 부모의 decrement 이벤트 호출</span></div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'decrement'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>싱글 파일 컴포넌트를 사용한 Vue 앱을 만들어보았습니다.</p><h2 id="마침"><a href="#마침" class="headerlink" title="마침"></a>마침</h2><p>포스트도 오랜만이고, 글을 며칠을 나누어 쓰다 보니, 앞뒤의 내용도 헷갈리고 많이 어렵네요. ㅠ<br>그래도.. 현재 포스트까지의 내용을 이해하실 수 있다면 다른 vue를 사용하여 여러 가지 시도를 해보시기 충분하지 않을까 합니다.<br>앞으로 Router와 Vuex를 활용하는 방법까지 배우신다면 실무에서도 무리가 없지 않을까 생각해봅니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;h2 id=&quot;컴포넌트-사용하기
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="vue-cli" scheme="http://hyc7575.github.io/tags/vue-cli/"/>
    
      <category term="vue project" scheme="http://hyc7575.github.io/tags/vue-project/"/>
    
      <category term="vue component" scheme="http://hyc7575.github.io/tags/vue-component/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - Vue-cli를 이용한 vue 프로젝트 살펴보기 1</title>
    <link href="http://hyc7575.github.io/2017/12/21/2017-12-21-vue-prject-example/"/>
    <id>http://hyc7575.github.io/2017/12/21/2017-12-21-vue-prject-example/</id>
    <published>2017-12-21T02:52:54.000Z</published>
    <updated>2018-03-26T06:52:16.317Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><p>이번에는 vue-cli가 만들어준 Vue 프로젝트를 살펴보도록 하겠습니다.<br>그전에 한가지 짚고 가야 할 점이 있습니다.</p><p>vue-cli는 각 컴포넌트를 <code>.vue</code> 확장자를 가진 <code>싱글 파일 컴포넌트</code>로 만들어주기 때문에 지금부터는 기존까지의 Vue 코딩 방식과는 다른 방식으로 코딩하겠습니다.<br>문법 자체는 거의 동일하다보니 큰 문제없이 잘 진행할 수 있을 것입니다.</p><h2 id="싱글-파일-컴포넌트"><a href="#싱글-파일-컴포넌트" class="headerlink" title="싱글 파일 컴포넌트"></a>싱글 파일 컴포넌트</h2><p>그래서 싱글 파일 컴포넌트가 무엇 인가?<br>.vue 확장자를 파일을 Webpack 또는 Browserify와 같은 도구를 이용하여 빌드하여 Vue.js를 사용하는 것 입니다.<br>우리가 만든 app이라는 프로젝트의 <code>/src/App.vue</code>를 살펴봅시다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Essential Links<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://vuejs.org"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Core Docs<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://forum.vuejs.org"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Forum<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://chat.vuejs.org"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Community Chat<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://twitter.com/vuejs"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Ecosystem<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://router.vuejs.org/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>vue-router<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://vuex.vuejs.org/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>vuex<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://vue-loader.vuejs.org/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>vue-loader<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/vuejs/awesome-vue"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>awesome-vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'app'</span>,</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">msg</span>: <span class="string">'Welcome to Your Vue.js App'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-id">#app</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'Avenir'</span>, Helvetica, Arial, sans-serif;</div><div class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</div><div class="line">    <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</div><div class="line">&#125;</div><div class="line">　</div><div class="line"><span class="selector-tag">h1</span>,</div><div class="line"><span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">font-weight</span>: normal;</div><div class="line">&#125;</div><div class="line">　</div><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">list-style-type</span>: none;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">　</div><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line">　</div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#42b983</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p><p>마크업과 스크립트 그리고 css를 모두 한 파일에 작성합니다.</p><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>해당 컴포넌트의 마크업을 작성하고 스크립트에서 설정한 데이터 및 메서드 등을 연결시켜 줍니다.</p><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>컴포넌트의 데이터, 메서드, 라이프사이클 등 이전 까지 Vue 생성자에서 사용한 부분들을 이곳에서 작성합니다. 그리고 만들어진 컴포넌트를 반환해줍니다.</p><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p>해당 컴포넌트의 css를 정의합니다. 이 style태그에 <code>scoped</code> 라는 속성을 추가하면 해당 컴포넌트에 css가 종속됩니다.</p><p>앞으로는 이 싱글 파일 컴포넌트 방식으로 Vue 앱을 작성하겠습니다.</p><h2 id="카운트-앱"><a href="#카운트-앱" class="headerlink" title="카운트 앱"></a>카운트 앱</h2><p>App.vue의 모든 코드를 지우고 맛보기를 위해 간단한 카운트 앱을 만들어 보려 합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">　</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure><p>우선 기본 틀(?)을 생성 합시다.<br>(제가 사용하는 에디터는 Vue.js 관련된 문법 플러그인과 같은 기능을 추가하여서 단축키로 쉽게 기본 틀을 작성할 수 있습니다. 자신의 사용하는 에디터에서 한번 찾아보시는 것을 추천합니다.)</p><p>이제 카운트 앱의 기능을 생각 해봅시다.<br>카운트 앱은 기준이 되는 숫자, 증가 행위, 감소 행위가 있을 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">num</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        increment() &#123;</div><div class="line">            <span class="comment">// 증가</span></div><div class="line">            <span class="keyword">this</span>.num++;</div><div class="line">        &#125;,</div><div class="line">        decrement() &#123;</div><div class="line">            <span class="comment">// 감소</span></div><div class="line">            <span class="keyword">this</span>.num--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure><p>한번 확인해 보시길 바랍니다. 기존 Vue.js와 거의 비슷하지요?<br>게다가 webpack에서 babel이 기본으로 셋팅되어 있어서 es5이상의 문법을 사용 할 수 있습니다.</p><p>자 이제 데이터와, 기능(메서드)를 만들었으니 이벤트를 연결 합니다. 이 또한 기존 Vue.js와 동일합니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>감소<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p><p>카운트 앱의 모든 기능이 완성 되었습니다.<br>이제 <code>npm run dev</code>를 사용하여 실행해봅시다. 이미 실행 되어있다면 웹 페이지를 띄워봅시다. 기본적으로 핫 로딩을 지원하기 때문에 바로 적용되어 있을 것 입니다.</p><p>모든 기능이 잘 동작하는데 뭔가 조금 아쉽네요. 스타일을 입혀봅시다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>감소<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">num</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        increment() &#123;</div><div class="line">            <span class="comment">// 증가</span></div><div class="line">            <span class="keyword">this</span>.num++;</div><div class="line">        &#125;,</div><div class="line">        decrement() &#123;</div><div class="line">            <span class="comment">// 감소</span></div><div class="line">            <span class="keyword">this</span>.num--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span><span class="css"></span></div><div class="line">*&#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</div><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;<span class="attribute">height</span>: <span class="number">100%</span>;&#125;</div><div class="line"><span class="selector-id">#wrap</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span> &gt; <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#53a9f9</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">32px</span>;</div><div class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">button</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8px</span>;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">60px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">34px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">34px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">    <span class="attribute">outline</span>: none;</div><div class="line">    <span class="attribute">border</span>: none;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#88c5ff</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure><p>이제 우리는 Vue.js 프로젝트 생성도 해보았고 하나의 앱을 만들어 보았습니다.<br>하지만 아직 모든 부분을 살펴본게 아니기 때문에 다음장까지는 이어서 vue-cli가 만들어준 프로젝트를 살펴보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;p&gt;이번에는 vue-cli가 
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="vue-cli" scheme="http://hyc7575.github.io/tags/vue-cli/"/>
    
      <category term="vue project" scheme="http://hyc7575.github.io/tags/vue-project/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - Vue-cli를 이용한 vue 프로젝트 생성</title>
    <link href="http://hyc7575.github.io/2017/12/20/2017-12-20-vue-vue-cli-and-vuex/"/>
    <id>http://hyc7575.github.io/2017/12/20/2017-12-20-vue-vue-cli-and-vuex/</id>
    <published>2017-12-20T08:25:13.000Z</published>
    <updated>2017-12-21T02:52:24.896Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><h2 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h2><p>여태까지 Vue.js에 대한 아주아주 기본적인 문법들을 살펴보았습니다. 이제 Vue.js를 사용하여 프로젝트를 구성해보려고 합니다.<br>프로젝트를 구성해보기 앞서 <code>vue-cli</code>라는 것을 설치 하겠습니다.</p><p>vue-cli는 vue 프로젝트를 매우 간편하게 구성하도록 도와주는 보일러 플레이트 입니다. 리액트를 사용해보셨다면 create-react-app과 같은 기능을 도와준다고 생각하면 되겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g vue-cli</div></pre></td></tr></table></figure><p>vue-cli설치가 완료 되었다면 이제 vue프로젝트를 생성해봅시다.<br>실행문법은 다음과 같습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init &lt;template-name&gt; &lt;project-name&gt;</div></pre></td></tr></table></figure></p><p>템플릿 네임은 해당 프로젝트를 어떠한 환경으로 설정 할 것인지 정하는 것 이고, 프로젝트 네임은 해당 프로젝트의 이름을 입력합니다.<br>프로젝트 네임은 사용자가 원하는 이름으로 설정하면 되지만 템플릿 네임은 vue-cli에서 제공하는 몇가지 안을 보고 선택해야 합니다.</p><ul><li>webpack</li><li>webpack-simple</li><li>browserify</li><li>browserify-simple</li><li>pwa</li><li>simple</li></ul><p>위 와같은 템플릿을 제공하고 있으며 각 템플릿 별 자세한 설명은 <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">vue-cli 깃헙</a>을 확인해보시길 바랍니다.</p><p>저희가 사용할 템플릿은 webpack-simple 입니다. 이름을 보면 유추할 수 있겠지만 webpack을 사용하는 프로젝트를 생성해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init webpack-simple app</div></pre></td></tr></table></figure><p>명령어를 입력하면 몇 가지 환경에 대한 질문을 합니다. 가벼운 연습 예제로 사용할 예정이니 전부 엔터로 넘어갑니다.<br>모든 질문이 끝나면 첫 번째 vue 프로젝트가 생성되었습니다.</p><p><img src="https://user-images.githubusercontent.com/14171723/34198787-f6cbc400-e5ae-11e7-9d3a-0998b79b02c6.png" alt="structure"><br>위 vue-cli 버전은 2.9.2 입니다.</p><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p>자 이제 프로젝트도 만들었으니 실행을 시켜보아야겠지요?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> app</div><div class="line">npm i</div></pre></td></tr></table></figure><p>방금 만든 app 프로젝트로 들어가서 package.json에 명시된 모듈들을 설치해줍시다.<br>설치가 완료되었다면</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure><p>명령어를 실행하면 자동으로 웹 브라우저에 프로젝트가 실행될 것 입니다.<br>이제 Vue.js 프로젝트를 시작할 모든 준비가 완료되었습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;h2 id=&quot;프로젝트-생성&quot;&gt;
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="vue-cli" scheme="http://hyc7575.github.io/tags/vue-cli/"/>
    
      <category term="vue project" scheme="http://hyc7575.github.io/tags/vue-project/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - Component(컴포넌트) 2</title>
    <link href="http://hyc7575.github.io/2017/11/13/2017-11-13-vue-component2/"/>
    <id>http://hyc7575.github.io/2017/11/13/2017-11-13-vue-component2/</id>
    <published>2017-11-13T08:32:25.000Z</published>
    <updated>2017-12-06T01:56:52.388Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><p>지난 시간에 이어 컴포넌트를 사용하는 몇가지 방법을 더 알아보고자 합니다.<br>조금 더 쉽게 템플릿을 만드는 방법과 각 컴포넌트의 통신 방법을 예제를 들어 설명 하도록 하겠습니다.</p><h2 id="컴포넌트-template"><a href="#컴포넌트-template" class="headerlink" title="컴포넌트 template"></a>컴포넌트 template</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"templateId"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        &#123;&#123;text&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'test-component'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'#templateId'</span>,</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">text</span>: <span class="string">'이곳에 컴포넌트의 마크업을 진행!!'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>template</code> 기능을 이용하면 복잡한 마크업의 컴포넌트를 생성할 수 있습니다.<br>사용방법은 위 예제와 같이 <code>template: &#39;#templateId&#39;</code> 형태로 html의 template 태그의 id와 template 속성의 값을 매핑 시켜줍니다. 템플릿 내부는 기존 배워왔던 Vue.js의 문법과 동일하게 사용 가능합니다.</p><h2 id="부모-자식간-통신"><a href="#부모-자식간-통신" class="headerlink" title="부모 자식간 통신"></a>부모 자식간 통신</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">eat</span>=<span class="string">"parentEat"</span> <span class="attr">:parent-calorie</span>=<span class="string">"calorie"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">　</div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>parent 먹은 칼로리 : &#123;&#123;parentCalorie&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>child 먹은 칼로리 : &#123;&#123;calorie&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childEat"</span>&gt;</span>밥먹자!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'parent'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'#parent'</span>,</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">calorie</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">parentEat</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.calorie += <span class="number">800</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'#child'</span>,</div><div class="line">    <span class="attr">props</span>: [<span class="string">'parentCalorie'</span>],</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">calorie</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">childEat</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.calorie += <span class="number">500</span>;</div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'eat'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="EbmrOB" data-default-tab="js,result" data-user="small" data-embed-version="2" data-pen-title="EbmrOB" class="codepen">See the Pen <a href="https://codepen.io/small/pen/EbmrOB/" target="_blank" rel="external">EbmrOB</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>기본적으로 데이터는 부모에서 자식으로 향하는 단방향 데이터 흐름을 가지고 있습니다.<br>위 예제는 자식 컴포넌트에서 부모의 데이터를 수정하는 예제입니다.</p><p>자식은 1끼에 500 칼로리를 섭취하지만 부모는 1끼에 800칼로리를 섭취합니다. 각각 부모와 자식은 칼로리라는 데이터를 가지고 있으며 자식이 밥을 먹을때만 부모도 함께 먹습니다.</p><p>밥을 먹는 이벤트를 발생시키는 트리거(버튼)는 자식이 가지고 있습니다. 이 트리거는 childEat라는 메서드를 실행 시켜줍니다. 이 메서드는 자식의 칼로리를 500 증가시켜주며 <code>$emit()</code>을 사용하여 <code>eat</code>이라는 이벤트를 발생시킵니다. eat은 child 컴포넌트를 사용(?)하는 부분에서 찾아볼 수 있습니다.</p><p><code>@eat=&quot;parentEat&quot;</code> 이런식으로 말이지요.</p><p>eat이라는 이벤트가 감지(발생)되면 parentEat이라는 메서드를 실행하게 되는 것 이지요.<br>이 parentEat은 부모의 칼로리를 800 증가 시켜줍니다. 이로써 자식 컴포넌트에서 부모의 데이터를 접근 할 수 있게 되었습니다.</p><p>이해가 잘 안된다면 아래 이미지를 한번 살펴봅시다.<br><img src="https://user-images.githubusercontent.com/14171723/32719286-3dcdc840-c8a3-11e7-9c7e-8e8652b832a3.png" alt="부모자식통신"></p><h2 id="컴포넌트-간-통신"><a href="#컴포넌트-간-통신" class="headerlink" title="컴포넌트 간 통신"></a>컴포넌트 간 통신</h2><p>부모와 자식이 아닌 관계에서도 컴포넌트간의 통신이 필요할 때 가 있을 수 있습니다. 다음 예제는 빈 Vue 인스턴스를 이벤트 버스로 이용한 예제 입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">component1</span>&gt;</span><span class="tag">&lt;/<span class="name">component1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">component2</span>&gt;</span><span class="tag">&lt;/<span class="name">component2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"c1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendData"</span>&gt;</span>컴포넌트 1 버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'component1'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'#c1'</span>,</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">text</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">sendData</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            eventBus.$emit(<span class="string">'send'</span>, <span class="keyword">this</span>.text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">Vue.component(<span class="string">'component2'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;p&gt;&#123;&#123;text&#125;&#125;&lt;/p&gt;'</span>,</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">text</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">showText</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.text = t</div><div class="line">        &#125;    </div><div class="line">    &#125;,</div><div class="line">    <span class="attr">created</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        eventBus.$on(<span class="string">'send'</span>, <span class="keyword">this</span>.showText);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> eventBus = <span class="keyword">new</span> Vue(); <span class="comment">// 이벤트 버스</span></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="BmREmB" data-default-tab="js,result" data-user="small" data-embed-version="2" data-pen-title="BmREmB" class="codepen">See the Pen <a href="https://codepen.io/small/pen/BmREmB/" target="_blank" rel="external">BmREmB</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>input에 값을 입력 후 버튼을 눌러봅시다. input에 들어간 값이 텍스트로 출력 되는 것을 확인 할 수 있습니다.<br>이 방식 또한 위의 부모 자식간의 통신과 비슷합니다.</p><p>컴포넌트1에서 <code>$emit()</code> 을 이용하여 이벤트 트리거를 생성 한 후 컴포넌트2 에서 <code>$on()</code>을 이용하여 이벤트를 감지하는 방법입니다. 단지 전역에 있는 eventBus라는 통로를 이용한다는 점이 다를 뿐 이지요.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;p&gt;지난 시간에 이어 컴포넌트
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="directive" scheme="http://hyc7575.github.io/tags/directive/"/>
    
      <category term="디렉티브" scheme="http://hyc7575.github.io/tags/%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C/"/>
    
      <category term="지시자" scheme="http://hyc7575.github.io/tags/%EC%A7%80%EC%8B%9C%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>html5 geolocation api 를 이용한 현 위치 날씨 알아보기</title>
    <link href="http://hyc7575.github.io/2017/11/10/2017-11-10-react-weather-push/"/>
    <id>http://hyc7575.github.io/2017/11/10/2017-11-10-react-weather-push/</id>
    <published>2017-11-10T05:11:28.000Z</published>
    <updated>2017-12-20T08:58:45.188Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg"/><p>html5의 스펙인 Geolocation을 이용하여 현재 위치의 날씨를 알려주는 기능을 만들어 볼까 합니다.<br>service worker와 firebase에서 제공하는 fcm 을 이용하여 웹앱 형태로 추 후 만들어 볼 예정이기도 합니다.</p><p>React를 이용한 무언가를 만들어 보아야지 하고 결심하고 시작한 작업이지만 만들다 보니 React의 중요성이 크지 않게 되었네요.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i -g create-react-app</div><div class="line">create-react-app weatherPush</div></pre></td></tr></table></figure><p>create-react-app 도구를 사용하여 react 프로젝트를 생성합니다.</p><h2 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h2><p><img src="https://user-images.githubusercontent.com/14171723/32644952-23aef72c-c628-11e7-9684-0cf1d31fb8b5.png" alt="complte-folder-structure"><br>작업이 끝나면 이러한 형태의 구조를 가지게 됩니다. ( firebase와 ServiceWorker 관련 파일은 무시해주세요. 아직 진행 중.. )</p><h2 id="링크"><a href="#링크" class="headerlink" title="링크"></a>링크</h2><p><a href="https://github.com/hyc7575/weatherPush" target="_blank" rel="external">깃허브 링크</a></p><h2 id="핵심-코드"><a href="#핵심-코드" class="headerlink" title="핵심 코드"></a>핵심 코드</h2><p>핵심인 App.js 정도만 살펴보려 합니다.</p><p>App.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</div><div class="line"><span class="keyword">import</span> MyMap <span class="keyword">from</span> <span class="string">'../components/map'</span>;</div><div class="line"><span class="keyword">import</span> WeatherInfo <span class="keyword">from</span> <span class="string">'../components/weatherInfo'</span>;</div><div class="line"><span class="keyword">import</span> mapApi <span class="keyword">from</span> <span class="string">'../config/googleMap'</span>;</div><div class="line"><span class="keyword">import</span> weatherConfig <span class="keyword">from</span> <span class="string">'../config/weather'</span></div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</div><div class="line"><span class="keyword">import</span> <span class="built_in">Promise</span> <span class="keyword">from</span> <span class="string">'bluebird'</span>;</div><div class="line">　</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        　</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">position</span>: [],</div><div class="line">            <span class="attr">city</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">countryCode</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">weatherList</span>: [],</div><div class="line">            <span class="attr">formatted_address</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">weatherDate</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    componentWillMount() &#123;</div><div class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">            navigator.geolocation.getCurrentPosition(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</div><div class="line">                <span class="comment">// 아래 api 위도 경도가 조금 정확하지 않아서 html5 스펙인 geolocation 사용</span></div><div class="line">                <span class="keyword">this</span>.setState(&#123;</div><div class="line">                    <span class="attr">position</span>: [p.coords.latitude, p.coords.longitude]</div><div class="line">                &#125;, () =&gt; &#123;</div><div class="line">                    resolve(p.coords)</div><div class="line">                &#125;)</div><div class="line">            &#125;);</div><div class="line">        &#125;).then(<span class="function">(<span class="params">coords</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">                axios.get(<span class="string">'https://freegeoip.net/json/'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">const</span> data = res.data;</div><div class="line">                    <span class="keyword">this</span>.setState(&#123;</div><div class="line">                        <span class="attr">city</span>: (data.city || data.region_name),</div><div class="line">                        <span class="attr">countryCode</span>: data.country_code</div><div class="line">                    &#125;, () =&gt; &#123;</div><div class="line">                        resolve(&#123;</div><div class="line">                            <span class="attr">city</span>: (data.city || data.region_name),</div><div class="line">                            <span class="attr">countryCode</span>: data.country_code,</div><div class="line">                            <span class="attr">coords</span>: coords</div><div class="line">                        &#125;)</div><div class="line">                    &#125;);</div><div class="line">                &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="built_in">console</span>.error(err);</div><div class="line">                &#125;);</div><div class="line">            &#125;)</div><div class="line">        &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">                axios.get(<span class="string">`http://api.openweathermap.org/data/2.5/forecast?id=524901&amp;APPID=<span class="subst">$&#123;weatherConfig.key&#125;</span>&amp;q=<span class="subst">$&#123;data.city.toLowerCase()&#125;</span>,<span class="subst">$&#123;data.countryCode.toUpperCase()&#125;</span>`</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.setState(&#123;</div><div class="line">                        <span class="attr">weatherList</span>: res.data.list</div><div class="line">                    &#125;, () =&gt; &#123;</div><div class="line">                        resolve(data.coords)</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;)</div><div class="line">        &#125;).then(<span class="function">(<span class="params">coords</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">const</span> geocoder = <span class="keyword">new</span> <span class="built_in">window</span>.google.maps.Geocoder;</div><div class="line">            <span class="keyword">const</span> latlng = &#123;</div><div class="line">                <span class="attr">lat</span>: coords.latitude,</div><div class="line">                <span class="attr">lng</span>: coords.longitude</div><div class="line">            &#125;;</div><div class="line">            geocoder.geocode(&#123;</div><div class="line">                <span class="string">'location'</span>: latlng</div><div class="line">            &#125;, (results, status) =&gt; &#123;</div><div class="line">                <span class="keyword">this</span>.setState(&#123;</div><div class="line">                    <span class="attr">formatted_address</span>: results[results.length - <span class="number">1</span>].formatted_address</div><div class="line">                &#125;)</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    　</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;position, weatherList, formatted_address&#125; = <span class="keyword">this</span>.state;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"app"</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"app-title"</span>&gt;</span>날씨 알림 서비스<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"map-wrap"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">MyMap</span> <span class="attr">apiKey</span>=<span class="string">&#123;mapApi.apiKey&#125;</span> <span class="attr">center</span>=<span class="string">&#123;position&#125;</span> <span class="attr">zoom</span>=<span class="string">&#123;16&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">MyMap</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"info-area"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                        &#123;formatted_address</div><div class="line">                            ? `당신은 $&#123;formatted_address&#125;에 위치하시군요.`</div><div class="line">                            : '위치를 탐색중입니다...'&#125;</div><div class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"weather-info-wrap"</span>&gt;</span></div><div class="line">                        &#123;weatherList.map((v, i) =&gt; &#123;</div><div class="line">                            const now = new Date();</div><div class="line">                            const date = new Date(v.dt_txt).getDate();</div><div class="line">                            if (now.getDate() + this.state.weatherDate &gt;= date) &#123;</div><div class="line">                                const hour = v.dt_txt.split(' ')[1].substr(0, 2);</div><div class="line">                                return (<span class="tag">&lt;<span class="name">WeatherInfo</span> <span class="attr">data</span>=<span class="string">&#123;v&#125;</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> <span class="attr">hour</span>=<span class="string">&#123;hour&#125;</span> <span class="attr">date</span>=<span class="string">&#123;date&#125;/</span>&gt;</span>)</div><div class="line">                            &#125;</div><div class="line">                        &#125;)&#125;</div><div class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"btn"</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</div><div class="line">                    this.setState(&#123;</div><div class="line">                        weatherDate: this.state.weatherDate + 1</div><div class="line">                    &#125;);</div><div class="line">                &#125;&#125;&gt;더 보기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">　</div><div class="line">export default App;</div></pre></td></tr></table></figure><p>각 api요청을 위한 axios, 순차적인 비동기 작업이 필요하여 bluebird(Promise)를 사용하였습니다.<br>각 api요청 및 상태 작업을 살펴보도록 하겠습니다.</p><p>　</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">navigator.geolocation.getCurrentPosition(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 좌표 값 get</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>html5 스펙에서 추가된 geolocation 입니다. 현재 위치의 위도 경도 값을 구할 수 있습니다. 이제 이 좌표를 이용하여서 google map에서 현 위치를 표시 해 줄 것 입니다.</p><p>　<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">'https://freegeoip.net/json/'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// get 좌표 or 지역 name</span></div><div class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.error(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>ip, 좌표, 지역 등의 값을 제공해줍니다. geolocation에 비해 좌표가 정확하지 않아 날씨 api에서 필요한 지역 정보만 사용하였습니다.</p><p>　<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">`http://api.openweathermap.org/data/2.5/forecast?id=524901&amp;APPID=<span class="subst">$&#123;weatherConfig.key&#125;</span>&amp;q=<span class="subst">$&#123;data.city.toLowerCase()&#125;</span>,<span class="subst">$&#123;data.countryCode.toUpperCase()&#125;</span>`</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 날씨 정보 get</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>지역정보를 통하여 해당 지역의 날씨에 대한 정보를 가져옵니다. 위의 freegeoip와 지역 네이밍 규칙이 비슷하더군요.<br>이 데이터를 가공하여 사용자에게 정보를 보여줍니다.</p><p>　<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> geocoder = <span class="keyword">new</span> <span class="built_in">window</span>.google.maps.Geocoder;</div><div class="line"><span class="keyword">const</span> latlng = &#123;</div><div class="line">    <span class="attr">lat</span>: coords.latitude,</div><div class="line">    <span class="attr">lng</span>: coords.longitude</div><div class="line">&#125;;</div><div class="line">geocoder.geocode(&#123;</div><div class="line">    <span class="string">'location'</span>: latlng</div><div class="line">&#125;, (results, status) =&gt; &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">formatted_address</span>: results[results.length - <span class="number">1</span>].formatted_address</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>google의 geoCoder 를 이용하여 상세한 지역 정보를 가져옵니다. (우편번호, 구, 군 등..)<br>위의 freegeoip를 사용하지 않고 이 정보를 잘 가공만 한다면 문제없이 사용 가능하지 않을까 합니다. ( 코드 분량과 수고가 좀 필요할 것 같아서 분리 하였습니다. )</p><h2 id="화면"><a href="#화면" class="headerlink" title="화면"></a>화면</h2><p><img src="https://user-images.githubusercontent.com/14171723/32645792-64e8ce4e-c62c-11e7-87ec-b9c1a58483df.png" alt="view"></p><p>더보기를 누르면 state.weatherDate 값이 증가하며 그 다음날의 날씨를 불러올 수 있습니다. 해외에서 제공하는 api때문인지 날씨가 묘하게 다른감이 없지 않아 있더군요. 개인 연습용으로 작업하는 것이라 무시하고 진행하였습니다.</p><h2 id="apis"><a href="#apis" class="headerlink" title="apis"></a>apis</h2><p>날씨 : <a href="https://openweathermap.org/current" target="_blank" rel="external">링크</a><br>지역(freegeoip) : <a href="https://freegeoip.net/" target="_blank" rel="external">링크</a><br>지도 : <a href="https://developers.google.com/maps/?hl=ko" target="_blank" rel="external">api 링크</a>, <a href="https://github.com/istarkov/google-map-react" target="_blank" rel="external">외부 컴포넌트 링크</a></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>firebase에서 제공하는 메세징 서비스(fcm)와 service worker를 추가하여 웹앱 형태로 동작하도록 추가적인 작업을 진행 해보려합니다.<br>제 검색능력이 부족한지 자료를 구하기가 많이 힘드네요. 현재 많은 삽질을 겪고 있습니다. 가끔 시간을 내어서 완성시켜 봐야겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg&quot;/&gt;&lt;p&gt;html5의 스펙인 Geolocation을 이용하여 현재 위치의 날씨를 알려주는 기능을 만들어 볼까 합니
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="React" scheme="http://hyc7575.github.io/categories/Javascript/React/"/>
    
    
      <category term="React" scheme="http://hyc7575.github.io/tags/React/"/>
    
      <category term="google map api" scheme="http://hyc7575.github.io/tags/google-map-api/"/>
    
      <category term="weather api" scheme="http://hyc7575.github.io/tags/weather-api/"/>
    
      <category term="html5 geolocation" scheme="http://hyc7575.github.io/tags/html5-geolocation/"/>
    
      <category term="geolocation" scheme="http://hyc7575.github.io/tags/geolocation/"/>
    
  </entry>
  
  <entry>
    <title>html/css 를 이용한 라디오 버튼 커스터마이징</title>
    <link href="http://hyc7575.github.io/2017/09/19/2017-09-19-custom-radio-button/"/>
    <id>http://hyc7575.github.io/2017/09/19/2017-09-19-custom-radio-button/</id>
    <published>2017-09-19T09:09:38.000Z</published>
    <updated>2017-11-26T11:33:07.557Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/htmlcssposter.png"/><p>가끔 웹페이지를 둘러보면 라디오 버튼과 같은 기능을 가지고 있으면서도 스크립트를 사용하여 기능 구현을 하는 경우를 보았습니다. 대부분 흔히 알고 있는 동그란 라디오 버튼과 모양이 많이 달라서 스크립트를 사용한 것 같더군요. 최근 작은 프로젝트를 진행하면서 라디오 버튼을 커스터마이징 해야 할 일이 생겨서 작업한 코드를 남겨볼까 합니다.</p><p>우선 예제의 코드펜 링크입니다.<br><a href="https://codepen.io/small/pen/BwoMRM?editors=1010" target="_blank" rel="external">https://codepen.io/small/pen/BwoMRM?editors=1010</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>grid css 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radio-items"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"a1"</span> <span class="attr">class</span>=<span class="string">"only-sr checked"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp1"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"a1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"a2"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp1"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"a2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>grid css 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 420px;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radio-items"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"b1"</span> <span class="attr">class</span>=<span class="string">"only-sr checked"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp2"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"b1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"b2"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp2"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"b2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"b3"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp2"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"b3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"b4"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp2"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"b4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>grid css 3 (decimal)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 520px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radio-items"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>  <span class="comment">&lt;!-- width auto important, 소수점 백그라운드 이슈로 인해 auto 설정 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">class</span>=<span class="string">"only-sr checked"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp3"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"c1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"c2"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp3"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"c2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"c3"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp3"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"c3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"c4"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp3"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"c4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"c5"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp3"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"c5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"c6"</span> <span class="attr">class</span>=<span class="string">"only-sr"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp3"</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"c6"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>label의 명시적 연결을 통해 스크립트의 사용 없이 충분히 원하는 모양으로 커스터마이징이 가능합니다. <code>&lt;input type=&quot;file&quot;&gt;</code>등 다른 input 요소들 또한 같은 방법으로 커스터마이징을 많이 하곤 합니다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> ie8 &#123;</div><div class="line">    <span class="selector-class">.ie8</span> &#123;</div><div class="line">        @<span class="keyword">content</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">　</div><div class="line"><span class="comment">/* reset */</span></div><div class="line">*&#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>&#125;</div><div class="line">body &#123;padding: <span class="number">20px</span>;&#125;</div><div class="line">　</div><div class="line"><span class="comment">/* temp grid */</span></div><div class="line"><span class="selector-class">.col-2</span> &#123;<span class="attribute">width</span>: <span class="number">16.66%</span>;&#125;</div><div class="line"><span class="selector-class">.col-3</span> &#123;<span class="attribute">width</span>: <span class="number">25%</span>;&#125;</div><div class="line"><span class="selector-class">.col-6</span> &#123;<span class="attribute">width</span>: <span class="number">50%</span>;&#125;</div><div class="line">　</div><div class="line"><span class="selector-class">.only-sr</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">9999px</span> <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.radio-items</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#454a60</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">    &gt; <span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">display</span>: table-cell;</div><div class="line">        <span class="attribute">height</span>: <span class="number">49px</span>;</div><div class="line">        <span class="attribute">line-height</span>: <span class="number">49px</span>;</div><div class="line">        <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#454a60</span>;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">    &#125;</div><div class="line">    &gt; <span class="selector-tag">div</span>:first-child &#123;</div><div class="line">        <span class="attribute">border-left</span>: none;</div><div class="line">        <span class="attribute">width</span>: auto <span class="meta">!important</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">label</span> &#123;</div><div class="line">        <span class="attribute">display</span>: block;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#454a60</span>;</div><div class="line">        <span class="attribute">vertical-align</span>: middle;</div><div class="line">        <span class="attribute">box-sizing</span>: border-box;</div><div class="line">        <span class="attribute">cursor</span>: pointer;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span>:checked + <span class="selector-tag">label</span>&#123;</div><div class="line">        <span class="attribute">background-color</span>: <span class="number">#454a60</span>;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">include</span> ie8 &#123;</div><div class="line">    <span class="comment">// ie8 에서는 :checked 미지원하기 때문에 class로 대체, 추가적인 스크립트가 필요합니다.</span></div><div class="line">    <span class="comment">// 조건부 주석을 이용하여 html에 ie8이라는 클래스를 추가합시다.</span></div><div class="line">    <span class="selector-class">.radio-items</span> &#123;</div><div class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-class">.checked</span> + <span class="selector-tag">label</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: <span class="number">#454a60</span>;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>sass 를 사용하였습니다. 아래 코드펜에서 compiled css를 확인해주세요. (scss 영역에 마우스 올리면 view compiled 버튼이 생깁니다.)</p><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="BwoMRM" data-default-tab="css,result" data-user="small" data-embed-version="2" data-pen-title="Custom radio button" class="codepen">See the Pen <a href="https://codepen.io/small/pen/BwoMRM/" target="_blank" rel="external">Custom radio button</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>핵심 키워드는 label의 명시적 연결과 css의 선택자의 조합입니다.<br>이 방법을 스크립트의 사용 없이 IE9 까지 정상적으로 지원이 가능합니다.<br>scss 하단을 보시면 ie8의 경우 <code>:checked</code>가 아닌 <code>.checked</code>를 사용한 것을 보실 수 있습니다.<br>IE8의 경우는 <code>:checked</code> css selector가 지원되지 않기 때문에 간단한 클래스 추가 삭제의 기능이 필요합니다. (여기서부터는 글의 제목과 조금 상이해지네요.)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;&lt;html class="ie ie8" lang="ko"&gt;&lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span><span class="comment">&lt;!--&lt;![endif]--&gt;</span></div><div class="line">　</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line"><span class="comment">&lt;!-- 각 radio-items에서 checked된 라디오 버튼에 checked 클래스를 기본적으로 부여합니다. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"a1"</span> <span class="attr">class</span>=<span class="string">"only-sr checked"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"temp1"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></div><div class="line">.</div><div class="line">.</div><div class="line">.</div></pre></td></tr></table></figure><p>우선 조건부 주석을 사용하여 html 요소에 ie8 클래스를 입력하고, 기본으로 체크가 되어있는 라디오 버튼들에게 checked 클래스를 줍니다. 그리고 하단의 javascript를 이용하여 checked클래스 토글 기능을 등록합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// util function</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">target, className</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>( (<span class="string">' '</span> + target.className + <span class="string">' '</span>).replace(<span class="regexp">/[\n\t]/g</span>, <span class="string">' '</span>).indexOf(<span class="string">' '</span> + className + <span class="string">' '</span>) &gt; <span class="number">-1</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">target, className</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> elClass = <span class="string">' '</span> + target.className + <span class="string">' '</span>;</div><div class="line">    <span class="keyword">while</span>(elClass.indexOf(<span class="string">' '</span> + className + <span class="string">' '</span>) !== <span class="number">-1</span>)&#123;</div><div class="line">        elClass = elClass.replace(<span class="string">' '</span> + className + <span class="string">' '</span>, <span class="string">''</span>);</div><div class="line">    &#125;</div><div class="line">    target.className = elClass;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">target, className</span>)</span>&#123;</div><div class="line">    target.className += <span class="string">' '</span> + className;   </div><div class="line">&#125;</div><div class="line"><span class="comment">// util function end</span></div><div class="line">　</div><div class="line"></div><div class="line"><span class="keyword">if</span>( hasClass( <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>], <span class="string">'ie8'</span> ) ) &#123; <span class="comment">// ie8 일 경우</span></div><div class="line">    <span class="keyword">var</span> radios = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input[type="radio"]'</span>),</div><div class="line">        i,</div><div class="line">        len = radios.length;</div><div class="line">　</div><div class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</div><div class="line">        radios[i].attachEvent(<span class="string">'onchange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> siblingsChecked = <span class="keyword">this</span>.parentNode.parentNode.querySelector(<span class="string">'.checked'</span>); <span class="comment">// 이전 checked 버튼</span></div><div class="line"></div><div class="line">            removeClass(siblingsChecked, <span class="string">'checked'</span>); <span class="comment">// checked 삭제</span></div><div class="line">            addClass(<span class="keyword">this</span>, <span class="string">'checked'</span>); <span class="comment">// checked 부여</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>요약해보면 ie8일 경우 자신에게 checked 클래스를 추가하고 기존의 checked 클래스를 삭제하는 이벤트를 등록하였습니다. 간단한 코드인데도 꽤나 길어지네요. DOM 라이브러리를 사용하시기를 추천합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/htmlcssposter.png&quot;/&gt;&lt;p&gt;가끔 웹페이지를 둘러보면 라디오 버튼과 같은 기능을 가지고 있으면서도 스크립트를 사용하여 기능 구현을 하는 경우를 보았습니다. 대부분 흔히 알고 있는 동그란 라디오 버튼과 모양이
      
    
    </summary>
    
      <category term="html/css" scheme="http://hyc7575.github.io/categories/html-css/"/>
    
    
      <category term="html" scheme="http://hyc7575.github.io/tags/html/"/>
    
      <category term="css" scheme="http://hyc7575.github.io/tags/css/"/>
    
      <category term="input radio" scheme="http://hyc7575.github.io/tags/input-radio/"/>
    
      <category term="custom radio" scheme="http://hyc7575.github.io/tags/custom-radio/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - Component(컴포넌트) 1</title>
    <link href="http://hyc7575.github.io/2017/08/31/2017-08-31-vue-component/"/>
    <id>http://hyc7575.github.io/2017/08/31/2017-08-31-vue-component/</id>
    <published>2017-08-31T05:04:42.000Z</published>
    <updated>2017-11-26T11:33:07.556Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><p>컴포넌트라 함은 웹 어플리케이션을 구성하는 하나하나의 부품입니다. Vue.js에서는 이 컴포넌트를 가장 강력한 기능 중 하나라고 소개하고 있습니다. 컴포넌트란 무엇인가 이런 자세한 설명은 생략하고 Vue.js에서 컴포넌트를 사용하는 방법을 바로 알아보도록 하겠습니다.</p><h2 id="컴포넌트-등록"><a href="#컴포넌트-등록" class="headerlink" title="컴포넌트 등록"></a>컴포넌트 등록</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 전역 컴포넌트 생성</span></div><div class="line">Vue.component(<span class="string">'test-component'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;p&gt;테스트용 컴포넌트 생성&lt;/p&gt;'</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="NveaEd" data-default-tab="js,result" data-user="small" data-embed-version="2" data-pen-title="NveaEd" class="codepen">See the Pen <a href="https://codepen.io/small/pen/NveaEd/" target="_blank" rel="external">NveaEd</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p><code>Vue.component</code>를 사용하여 전역 컴포넌트를 등록하면 Vue 인스턴스 내부 어디서든 해당 컴포넌트를 사용할 수 있게 됩니다. 이때 주의할 점은 컴포넌트가 사용되는 영역의 Vue 인스턴스화를 하기 전 컴포넌트를 등록해야 합니다. 이 예제에서는 test-component를 만들었고 특정 문장을 나타내는 기능을 하고 있습니다. 해당 컴포넌트를 2번 사용하였기에 일치하는 특정 문장이 2번 랜더링 되게 되었습니다.</p><h2 id="컴포넌트-등록-지역"><a href="#컴포넌트-등록-지역" class="headerlink" title="컴포넌트 등록(지역)"></a>컴포넌트 등록(지역)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ohterApp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 전역 컴포넌트 생성</span></div><div class="line"><span class="keyword">var</span> testComponent = &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;p&gt;테스트용 컴포넌트 지역 생성&lt;/p&gt;'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        <span class="string">'test-component'</span>: testComponent</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#otherApp'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p></p><p data-height="290" data-theme-id="11131" data-slug-hash="XaGZRN" data-default-tab="js,result" data-user="small" data-embed-version="2" data-pen-title="XaGZRN" class="codepen">See the Pen <a href="https://codepen.io/small/pen/XaGZRN/" target="_blank" rel="external">XaGZRN</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p><code>components</code>속성을 사용하여 컴포넌트를 해당 지역에서만 사용 가능하도록 등록할 수 있습니다. 예제는 test-component를 감싸고 있는 각각의 div에 한 번씩 사용하였지만 id가 app인 div내부에서만 test-component를 랜더링 하고 있는 것을 보여주고 있습니다.</p><h2 id="컴포넌트-데이터-바인딩-메서드-사용하기"><a href="#컴포넌트-데이터-바인딩-메서드-사용하기" class="headerlink" title="컴포넌트 데이터 바인딩, 메서드 사용하기"></a>컴포넌트 데이터 바인딩, 메서드 사용하기</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'test-component'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;button @click="increment"&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;'</span>,</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">count</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.count += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="eEXVON" data-default-tab="js,result" data-user="small" data-embed-version="2" data-pen-title="eEXVON" class="codepen">See the Pen <a href="https://codepen.io/small/pen/eEXVON/" target="_blank" rel="external">eEXVON</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>컴포넌트의 데이터는 <code>data</code>에서 관리합니다. 여기서 중요한 점은 이 data 속성은 이전처럼 객체가 아닌 함수여야 한다는 것입니다. 이는 컴포넌트마다 각각 자신의 상태를 가질 수 있게 하기 위함이라고 합니다. 이제 버튼을 클릭하면 increment 메서드가 실행되며 해당 버튼의 count 상태를 업데이트합니다.</p><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>Vue.js 포스팅을 시작할 때 React 와 비슷한 느낌을 받았다는 말을 언급한 적이 있었습니다. 그 이유 중 큰 비중을 차지한 것이 Vue.js에서도 Props를 이용하여 하위 컴포넌트로 데이터를 전달해주기 때문입니다. Props를 사용하는 방법을 알아보도록 합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span> <span class="attr">id</span>=<span class="string">"abk1341madgamlvba"</span> <span class="attr">:age</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        콘솔창을 열어 경고를 확인해봅시다.</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'test-component'</span>, &#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">id</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">            <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">name</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">            <span class="attr">default</span>: <span class="string">'noname'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">age</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">            <span class="attr">validator</span>: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> v &gt;= <span class="number">50</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;p&gt;name: &#123;&#123;name&#125;&#125;, age: &#123;&#123;age&#125;&#125;&lt;/p&gt;'</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="355" data-theme-id="11131" data-slug-hash="EvMLYJ" data-default-tab="js,result" data-user="small" data-embed-version="2" data-pen-title="EvMLYJ" class="codepen">See the Pen <a href="https://codepen.io/small/pen/EvMLYJ/" target="_blank" rel="external">EvMLYJ</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>props 프로퍼티로 전달받을 것으로 예상되는 데이터를 정의합니다. 타입 체크는 필수는 아니지만 원활한 개발을 위해 사용하시기를 권장합니다. 그리고 props를 받아오는 로직은 상위 컴포넌트에서 넘겨줍니다.</p><p>예제를 살펴봅시다.<br>type은 instanceof를 사용하여 클래스 타입을 체크합니다. <code>[String, Number]</code>처럼 배열을 사용하면 여러 가지 타입을 설정도 가능합니다. required는 필수 값 여부를 설정하고 name props의 default는 값이 들어오지 않을 경우 기본으로 사용되는 값을 의미합니다. 예제의 결과로써 noname이 표현된 이유이기도 합니다.<br>validator는 age 값을 받아와 특정 조건을 만족하는지 안 하는지 체크하고 <code>false를 반환한다면 경고</code>를 나타내 줍니다. 예제에서는 30이라는 값이 들어왔지만 validator의 조건을 만족하지 못하여 콘솔에 경고를 표시해주고 있습니다.</p><p>ps - 마크업 부분을 살펴보면 <code>:age (v-bind:age)</code>를 사용한 것 을 볼 수 있습니다. 이는 값이 String 형태로 넘어가는 것을 방지해준 것입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;p&gt;컴포넌트라 함은 웹 어플리
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="directive" scheme="http://hyc7575.github.io/tags/directive/"/>
    
      <category term="디렉티브" scheme="http://hyc7575.github.io/tags/%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C/"/>
    
      <category term="지시자" scheme="http://hyc7575.github.io/tags/%EC%A7%80%EC%8B%9C%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - Directive(지시자) 2/2</title>
    <link href="http://hyc7575.github.io/2017/07/18/2017-07-18-vue-directvie2/"/>
    <id>http://hyc7575.github.io/2017/07/18/2017-07-18-vue-directvie2/</id>
    <published>2017-07-18T05:35:38.000Z</published>
    <updated>2017-11-26T11:33:07.556Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><p>이번 2장에서 아직 다루지 않은 디렉티브들을 살펴볼 예정입니다. ( 요즘 프로그래밍 외 적으로 하고 있는 게 많아서 포스팅이 순위에서 많이 밀리네요 ㅠ )</p><h2 id="이벤트-바인딩-v-on"><a href="#이벤트-바인딩-v-on" class="headerlink" title="이벤트 바인딩 v-on"></a>이벤트 바인딩 v-on</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.once</span>=<span class="string">"myClickEvent"</span>&gt;</span>이벤트 바인딩 1( once )<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/달나라"</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"myClickEvent"</span>&gt;</span>이벤트 바인딩 2( prevent )<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mouse-area"</span> <span class="attr">v-on:mouseEnter</span>=<span class="string">"areaEnter"</span> <span class="attr">v-on:mouseLeave</span>=<span class="string">"areaLeave"</span>&gt;</span></div><div class="line">        &#123;&#123; areaState &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">areaState</span>: <span class="string">'마우스를 올려줘요!'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">myClickEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="string">'테스트 이벤트입니다!'</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">areaEnter</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.areaState = <span class="string">'들어왔다!'</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">areaLeave</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.areaState = <span class="string">'나갔다!'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="zzyNma" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="zzyNma" class="codepen">See the Pen <a href="https://codepen.io/small/pen/zzyNma/" target="_blank" rel="external">zzyNma</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>v-on 디렉티브를 사용하여서 우리가 methods에 등록한 메서드들을 특정 요소(element)의 이벤트로 연결 시켜줍니다. 사용 방법을 살펴보면 이벤트를 연결시킬 요소에 <code>v-on:event=&quot;function&quot;</code> 형태로 등록을 하게 됩니다.</p><p>2번 라인의 버튼을 살펴보면 click 이벤트로 Vue 인스턴스에 등록된 myClickEvent를 연결 시킨 모습을 볼 수 있습니다. 이제 버튼을 클릭하면 alert 경고창을 볼 수 있게 되었지요. 여기서 잘 살펴보면 위 언급한 형태와 조금 상이한 부분을 찾을 수 있는데 바로 <code>.once</code> 라는 <code>수식어</code>가 추가 된 점입니다. 이 수식어는 이벤트를 1번만 처리되도록 해주는 기능을 가지고 있기에 이 버튼은 alert 경고창을 1번만 보여주고 더 이상 동작을 하지 않을 것입니다.</p><p>다음으로 3번 라인의 <code>.prevent</code>는 e.preventDefault() 처럼 기본 이벤트를 막아주기 때문에 <code>/달나라 링크</code>로 이동하지 않습니다. 이러한 수식어는 여러가지가 존재하고 있으니 한번쯤 공식 api를 살펴보시길 바랍니다</p><h3 id="약어-사용"><a href="#약어-사용" class="headerlink" title="약어 사용"></a>약어 사용</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"myClickEvent"</span>&gt;</span>이벤트 바인딩 1( once )<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/달나라"</span> @<span class="attr">click.prevent</span>=<span class="string">"myClickEvent"</span>&gt;</span>이벤트 바인딩 2( prevent )<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mouse-area"</span> @<span class="attr">mouseEnter</span>=<span class="string">"areaEnter"</span> @<span class="attr">mouseLeave</span>=<span class="string">"areaLeave"</span>&gt;</span></div><div class="line">        &#123;&#123; areaState &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><code>@</code>를 사용하면 계속 v-on 을 타이핑 할 필요가 없어집니다. 저는 약어 사용이 더 편하기때문에 이 후 예제에서는 약어로 사용하겠습니다.</p><h2 id="속성-바인딩-v-bind"><a href="#속성-바인딩-v-bind" class="headerlink" title="속성 바인딩 v-bind"></a>속성 바인딩 v-bind</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"myImage"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:class</span>=<span class="string">"[italicFont, &#123; red : isRed &#125;]"</span>&gt;</span></div><div class="line">        흐으음~</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"()=&gt;&#123;this.isRed = !this.isRed&#125;"</span>&gt;</span>색칠!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">myImage</span>: <span class="string">'http://placehold.it/120x120?text=image'</span>,</div><div class="line">        <span class="attr">italicFont</span>: <span class="string">'italic'</span>,</div><div class="line">        <span class="attr">isRed</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="ZyVaVv" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="ZyVaVv" class="codepen">See the Pen <a href="https://codepen.io/small/pen/ZyVaVv/" target="_blank" rel="external">ZyVaVv</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>v-bind 디렉티브는 html 요소들의 속성들을 <code>동적으로</code> 바인딩을 해주는 기능입니다.</p><p>예제를 살펴보면 myImage라는 이미지 경로의 string 값을 src 속성으로 바인딩 해주었습니다.<br>다음으로 p 태그를 살펴보면 Array와 Object 를 사용하여서 동적으로 클래스를 바인딩 해주고 있습니다.배열의 각 값들을 해당 html 요소의 클래스로 부여합니다. 배열이 아닌 객체 형태는  <code>{ className: Boolean }</code> 형태를 취하며 값인 Boolean이 true를 가진다면 해당 className을 html 요소에 부여합니다.<br>예제에서의 Boolean영역에 위치한 isRed는 처음에는 false여서 red라는 클래스를 주지 않았지만 아래의 버튼으로 isRed값을 true로 만들면 red 라는 클래스가 추가되는 것을 확인할 수 있습니다.</p><h3 id="약어-사용-1"><a href="#약어-사용-1" class="headerlink" title="약어 사용"></a>약어 사용</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"myImage"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[italicFont, &#123; red : isRed &#125;]"</span>&gt;</span></div><div class="line">        흐으음~</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"()=&gt;&#123;this.isRed = !this.isRed&#125;"</span>&gt;</span>색칠!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>v-bind도 v-on과 마찬가지로 <code>:</code> 라는 약어로 사용할 수 있습니다.</p><h2 id="인풋-데이터-바인딩-v-model"><a href="#인풋-데이터-바인딩-v-model" class="headerlink" title="인풋 데이터 바인딩 v-model"></a>인풋 데이터 바인딩 v-model</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>textarea or input value<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> <span class="attr">placeholder</span>=<span class="string">"줄바꿈은 enter"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>입력값 :<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>checkbox or radio<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"check1"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"아이템1"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"check1"</span>&gt;</span>아이템1<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"check2"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"아이템2"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"check2"</span>&gt;</span>아이템2<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"check3"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"아이템3"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"check3"</span>&gt;</span>아이템3<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"check4"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"아이템4"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"check4"</span>&gt;</span>아이템4<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"check5"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"아이템5"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"check5"</span>&gt;</span>아이템5<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>체크 아이템 : <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        &#123;&#123;items&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>select<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selectItem"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"셀렉트a"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"셀렉트b"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"셀렉트c"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>선택 값 : <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        &#123;&#123;selectItem&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"getData"</span> @<span class="attr">click</span>=<span class="string">"getCurrentData"</span>&gt;</span>get current data<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">msg</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">items</span>: [], <span class="comment">// 단일의 checkbox의 경우는 array가 아닌 boolean 값을 사용합니다.</span></div><div class="line">        selectItem: <span class="string">'샐렉트a'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">getCurrentData</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">`</span></div><div class="line">msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span></div><div class="line">items: <span class="subst">$&#123;<span class="keyword">this</span>.items&#125;</span></div><div class="line">selectItem: <span class="subst">$&#123;<span class="keyword">this</span>.selectItem&#125;</span> `);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="347" data-theme-id="11131" data-slug-hash="XgoZjb" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="XgoZjb" class="codepen">See the Pen <a href="https://codepen.io/small/pen/XgoZjb/" target="_blank" rel="external">XgoZjb</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>이전까지 살펴 보았던 예제들은 모두, vue 인스턴스가 가지고 있는 data를 <code>단방향</code>으로 바인딩을 해주었다면 이제부터는 v-model을 사용하여 data를 <code>양방향</code>으로 바인딩 할 수 있도록 해줍니다.</p><p>만약 잘 이해가 가지 않는다면 예제의 값들을 변경 해보고 우측 하단의 버튼을 클릭해봅시다. 이전까지의 예제는 특정 이벤트를 발생시켜 data를 변경해왔지만 view의 form elements 들을 이용하여 data들을 변경할 수 있는 사실을 알 수 있습니다.</p><h2 id="v-pre-v-cloak-v-once"><a href="#v-pre-v-cloak-v-once" class="headerlink" title="v-pre, v-cloak, v-once"></a>v-pre, v-cloak, v-once</h2><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="zzQzOV" data-default-tab="html,result" data-user="small" data-embed-version="2" data-pen-title="zzQzOV" class="codepen">See the Pen <a href="https://codepen.io/small/pen/zzQzOV/" target="_blank" rel="external">zzQzOV</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><ul><li>v-pre는 <code>{{}}</code>인 머스타치 구문을 랜더링 하지 않고 보여주기 위한 디렉티브 입니다. (html의 pre태그 혹은 css의 white-spce: pre | pre-line 을 생각하면 될 것 같습니다.)</li><li>v-once는 데이터를 단 1번만 랜더링을 해주는 디렉티브입니다. 예제의 증가버튼을 눌러도 <code>초기 num</code>은 v-once로 설정되었기 때문에 값이 다시 바인딩되지 않습니다. 이는 업데이트 성능을 최적화 하는데 사용한다고 합니다.</li><li>v-cloak은 Vue인스턴스가 컴파일이 완료될때 까지 elements 들에 남아있다가, 컴파일이 완료되면 사라집니다. 컴파일이 완료되지 않은 상태에서는 머스타치 구문이 그대로 노출되기때문에 완료될때 까지 숨겨줄 필요성이 있습니다. 단 아래와 같은 css 구문이 필요합니다.<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[v-cloak]</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>지금까지 Vue.js의 디렉티브들을 살펴보았습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;p&gt;이번 2장에서 아직 다루지
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="directive" scheme="http://hyc7575.github.io/tags/directive/"/>
    
      <category term="디렉티브" scheme="http://hyc7575.github.io/tags/%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C/"/>
    
      <category term="지시자" scheme="http://hyc7575.github.io/tags/%EC%A7%80%EC%8B%9C%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - Directive(지시자) 1/2</title>
    <link href="http://hyc7575.github.io/2017/06/27/2017-06-21-vue-directive/"/>
    <id>http://hyc7575.github.io/2017/06/27/2017-06-21-vue-directive/</id>
    <published>2017-06-27T01:36:24.000Z</published>
    <updated>2017-11-26T11:33:07.556Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><p>디렉티브란 Vue.js 에서 사용되는 특별한 속성 입니다. Angular1 을 사용해보셨던 분들은 익숙할 것 입니다. Angular에서 <code>ng-</code> 를 사용한다면 Vue 에서는 <code>v-</code> 라는 접두사를 사용합니다. 이번 포스팅에서는 Vue.js 에서 기본적으로 제공하는 디렉티브 몇가지를 알아보려고 합니다.</p><h2 id="v-text와-v-html"><a href="#v-text와-v-html" class="headerlink" title="v-text와 v-html"></a>v-text와 v-html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    &#123;&#123;text&#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- &#123;&#123;text&#125;&#125; 와 동일 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"htmlText"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">'안녕안녕~'</span>,</div><div class="line">        <span class="attr">htmlText</span>: <span class="string">'&lt;span style="color: red"&gt;하이하이~&lt;/span&gt; !!'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="KqmeoZ" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="KqmeoZ" class="codepen">See the Pen <a href="https://codepen.io/small/pen/KqmeoZ/" target="_blank" rel="external">KqmeoZ</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><ul><li><p>v-text: <code>{{ }}</code> 와 같은 기능을 합니다. 해당 엘리먼트의 값이 data의 text 값으로 설정 된 것을 볼 수 있습니다.</p></li><li><p>v-html: html 코드를 랜더링 할 경우 사용합니다. v-text나 머스타치 구문을 사용할 경우 해당 string값 그대로 표시됩니다.</p></li></ul><h2 id="v-show와-v-if"><a href="#v-show와-v-if" class="headerlink" title="v-show와 v-if"></a>v-show와 v-if</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-if<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggleText"</span>&gt;</span>토글<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 이벤트 바인딩 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">isShow</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">text</span>: <span class="string">'보일까 말까!'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">toggleText</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>v-show와 v-if 모두 화면에 표시하는지 안하는지에 대한 지시자 입니다.</p><ul><li><p>v-show: css의 display 속성에 의하여 컨트롤 됩니다. 값이 false여도 랜더링은 되지만  display: none 처리가 되어있는 것 입니다.</p></li><li><p>v-if: 해당 엘리먼트의 랜더링 여부가 판단됩니다. 값이 false면 랜더링이 되지 않습니다. true라면 랜더링이 될 것이며 true에서 false로 변경될 때는 해당 엘리먼트가 삭제됩니다.</p></li></ul><p>아래 이미지를 보면 v-if는 해당 엘리먼트가 랜더링 되지 않았고, v-show 경우 display: none 처리가 되어있는 것을 보실 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/14171723/27375487-5582b6dc-56aa-11e7-8426-d13e7ea241c3.png" alt="v-if"></p><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="mwmzRd" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="mwmzRd" class="codepen">See the Pen <a href="https://codepen.io/small/pen/mwmzRd/" target="_blank" rel="external">mwmzRd</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h3 id="v-if의-else"><a href="#v-if의-else" class="headerlink" title="v-if의 else"></a>v-if의 else</h3><p>if문이 있으니 else 와 else if도 자연스럽게 따라오게 됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"state === 0"</span>&gt;</span></div><div class="line">        if 입니다.</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"state === 1"</span>&gt;</span></div><div class="line">        else if 입니다.</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">        else 입니다.</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeState"</span>&gt;</span>토글<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">state</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">changeState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// 0 ~ 2 랜덤 부여</span></div><div class="line">            <span class="keyword">var</span> state = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">3</span>, <span class="number">10</span>);</div><div class="line">            alert(state);</div><div class="line">            <span class="keyword">this</span>.state = state;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="MomzyZ" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="MomzyZ" class="codepen">See the Pen <a href="https://codepen.io/small/pen/MomzyZ/" target="_blank" rel="external">MomzyZ</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>바로 v-else-if와 v-else는 <code>바로 이전 형제엘리먼트가 v-if</code> 일 경우 사용한다는 점만 기억해두시면 됩니다. ( 우리가 아는 if와 같습니다! )</p><h2 id="v-for-디렉티브"><a href="#v-for-디렉티브" class="headerlink" title="v-for 디렉티브"></a>v-for 디렉티브</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-for example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"array-area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>array<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in arrayItem"</span>&gt;</span>&#123;&#123;index&#125;&#125; : &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"obj-area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>object<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"(item, key, index) in objItem"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"num-area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>number<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"n in 7"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"string-area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>string<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"s in text"</span>&gt;</span>&#123;&#123;s&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">arrayItem</span>: [<span class="string">'arr1'</span>, <span class="string">'arr2'</span>, <span class="string">'arr3'</span>, <span class="string">'arr4'</span>],</div><div class="line">        <span class="attr">objItem</span>: &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'hyeok'</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line">            <span class="attr">job</span>: <span class="string">'front end developer'</span>,</div><div class="line">            <span class="attr">birthday</span>: <span class="string">'0927'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">text</span>: <span class="string">'안녕해요!'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="gRRgzX" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="gRRgzX" class="codepen">See the Pen <a href="https://codepen.io/small/pen/gRRgzX/" target="_blank" rel="external">gRRgzX</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>v-for디렉티브는 굉장히 자주 사용되는 디렉티브 중 하나 입니다. 이 디렉티브는 기본적으로 <code>alias in(of) expression</code> 문법을 사용하며 expression자리에는 뷰모델의 데이터 들 중 Array, Object, Number, String 형태를 가진 값들이 올 수 있습니다.</p><ul><li><p>Array: 배열을 순환하며 alias 에 해당 인덱스의 값을 부여합니다. <code>(alias, index) in expression</code> 형태로 변경하여 인덱스 값 또한 넘겨받을 수 있습니다.</p></li><li><p>Object: 배열과 마찬가지로 객체를 순환합니다. 순환 순서는 Object.keys()로 나열된 키의 순서로 결정됩니다. <code>(alias, key, index) in expression</code> 형태로 사용이 가능합니다.</p></li><li><p>Number: expression의 값 만큼 순환하며 그 값은 1부터 시작합니다.</p></li><li><p>String: 문자열을 한자 한자 쪼개 한 단어씩 순환하며 표기합니다.</p></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://kr.vuejs.org/v2/api/#디렉티브" target="_blank" rel="external">Vue 디렉티브</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;p&gt;디렉티브란 Vue.js 에
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="directive" scheme="http://hyc7575.github.io/tags/directive/"/>
    
      <category term="디렉티브" scheme="http://hyc7575.github.io/tags/%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C/"/>
    
      <category term="지시자" scheme="http://hyc7575.github.io/tags/%EC%A7%80%EC%8B%9C%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - LifeCycle</title>
    <link href="http://hyc7575.github.io/2017/06/14/2017-06-14-vue-lifeCycle/"/>
    <id>http://hyc7575.github.io/2017/06/14/2017-06-14-vue-lifeCycle/</id>
    <published>2017-06-14T00:44:26.000Z</published>
    <updated>2017-11-26T11:33:07.555Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><p>라이프사이클이란 Vue 생성자의 호출 시점부터 mount 되기까지, 나아가 destroy 되기까지의 특정 시점들에 실행되는 메서드들 입니다. 아래 그림의 붉은 테두리를 가진 기호들이 Vue.js의 라이프사이클의 각 실행 시점입니다. (Vue.js가 어떤 흐름으로 동작하는지도 잘 나타나 있어서 많은 도움이 됩니다.)</p><p><img src="https://user-images.githubusercontent.com/14171723/27110978-f53bed4c-50e7-11e7-97b0-266c2244487c.png" alt="life-cyle"><br>출처 - <a href="https://vuejs.org/" target="_blank" rel="external">Vue.js 공식문서</a></p><p>위에서부터 아래로 쭉 실행됩니다. 흐름자체는 그림만으로도 충분히 이해가 가능할 것 이라고 생각합니다. 그러면 이제 각 라이프사이클 메서드들이 어떤 특징을 가지고 있는지 예제를 통하여 살펴봅시다.</p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    &#123;&#123;text&#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeText"</span>&gt;</span>변경!!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroyApp"</span>&gt;</span>파괴!?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><code>@click</code>이 지난 예제에 있던 <code>v-on</code>의 약자입니다. (이벤트를 등록합니다.)</p><ul><li>script</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">'안녕하세요~'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">changeText</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.text = <span class="string">'반갑습니다!'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">destroyApp</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.group(<span class="string">'--- destroyApp method ---'</span>);</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span> === app);</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$destroy());</div><div class="line">            <span class="built_in">console</span>.groupEnd();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">beforeCreate</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 아직 데이터 및 이벤트 정의 안됨</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- beforeCreate ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'text : '</span>, <span class="keyword">this</span>.text); <span class="comment">// undefined</span></div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">created</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 데이터와 이벤트는 접근 가능하지만, 아직 마운트가 안되서 $el 접근 불가</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- created ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'text : '</span>, <span class="keyword">this</span>.text); <span class="comment">// 안녕하세요~</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'element :'</span>, <span class="keyword">this</span>.$el); <span class="comment">// undefined</span></div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// el에 접근이 가능합니다. 보통 여기서 초기 데이터를 불러오곤 합니다.</span></div><div class="line">        <span class="comment">// beforeMount 에서는 el 접근 불가합니다.</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- mounted ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'element : ↓'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el); <span class="comment">// object HTMLDivElement</span></div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// data가 변경된 후 DOM 랜더링 직전에 실행 됩니다. 그로 인해 변경될 text data를 가지고 있는 것 입니다.</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- beforeUpdate ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'before update : '</span>, <span class="keyword">this</span>.text); <span class="comment">// 반갑습니다!</span></div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// DOM 랜더링이 끝난 후 실행됩니다. DOM 변경이 완료 된 후 특정 작업을 실행해야할 경우 이곳에..</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- updated ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'updated : '</span>, <span class="keyword">this</span>.text); <span class="comment">// 반갑습니다!</span></div><div class="line">        <span class="built_in">console</span>.groupEnd()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- destroyed ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'watcher : '</span>, <span class="keyword">this</span>._watcher.active);</div><div class="line">        <span class="keyword">this</span>.text = <span class="string">'변해라 ㅠ 안변한다 ㅠ'</span>;</div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="awmZRa" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="awmZRa" class="codepen">See the Pen <a href="https://codepen.io/small/pen/awmZRa/" target="_blank" rel="external">awmZRa</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>아마 codepn을 embed해서 <code>현재 블로그 페이지의 콘솔</code>에서 제가 작성한 예제의 로그들이 나타날 것 입니다.(혹시 안나온다면 예제 복사하셔서 보시면 됩니다.. ㅠ)</p><p><img src="https://user-images.githubusercontent.com/14171723/27120796-e4b3309c-511f-11e7-9e63-49a6c96cc2b3.png" alt="console"><br><code>예제 실행 -&gt; 변경 버튼 클릭 -&gt; 파괴 버튼 클릭</code>을 한 모습입니다.</p><ul><li><p>beforeCreate : 해당 영역에서는 data의 text를 접근할 수 없었습니다. 해당 시점에서는 아직 어떠한 설정이 되지 않았기 때문에 data는 물론 methods에도 접근할 수 없는 상태입니다.</p></li><li><p>created : 이벤트 및 데이터 설정이 완료되었습니다. 하지만 아직 템플릿이나 DOM이 마운트가 되어있지 않습니다. this.data는 제대로 가져오는 반면 this.$el 을 undefined로 반환해주고 있습니다.</p></li><li><p>beforeMount : 마운트 바로 이전 시점이며 <a href="https://kr.vuejs.org/v2/guide/render-function.html" target="_blank" rel="external">render</a>라는 메서드가 호출되는 시점입니다. 역시 this.$el 은 아직 접근 불가능합니다. 아마 beforeMount는 사용할 일이 많지 않을 것 입니다. (redenr 메서드는 추후에 다뤄보도록 하겠습니다.)</p></li><li><p>mounted : 마운트가 완료된 시점이며, this.$el 에 접근이 가능해집니다. 보통 이 부분에서 ajax를 호출하여 데이터를 불러옵니다.</p></li><li><p>beforeUpdate : changeText 메서드를 실행시켜 text data를 변경 후 실행됩니다. 데이터는 변경되어있는 상태이며 DOM 랜더링만 되지 않은 상태이기 떄문에 this.text가 <code>랜더링될 예정</code>인 반갑습니다! 를 반환해 줍니다.</p></li><li><p>updated : beforeUpdate 후 DOM 랜더링 까지 완료 된 후 실행되는 시점입니다.</p></li><li><p>beforeDestroy : 파기되기 직전의 상태입니다. 해당 인스턴스는 이 시점까지 완벽한(?) 동작을 수행합니다.</p></li><li><p>destroyed : 모든 기능이 파기 된 후 호출됩니다. 모든 이벤트가 제거되어있으며 하위에 존재하는 인스턴스 모두 삭제 됩니다. <code>this._watcher.active</code>가 false를 반환하며 더이상 감시하지 않는다는 상태를 알려줍니다.</p></li></ul><p>ps - 그림에는 없지만 Vue.js 2.2.0 부터 <code>&lt;keep-alive&gt;</code> 라는 기본 내장 컴포넌트에서 <code>activated</code>와 <code>deactivated</code>라는 라이프 사이클이 동작한다고 합니다만 이번 포스팅에서는 다루지 않겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;p&gt;라이프사이클이란 Vue 생
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="LifeCycle" scheme="http://hyc7575.github.io/tags/LifeCycle/"/>
    
      <category term="라이프사이클" scheme="http://hyc7575.github.io/tags/%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4/"/>
    
      <category term="생명주기" scheme="http://hyc7575.github.io/tags/%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - 뷰 모델 생성과 데이터 바인딩</title>
    <link href="http://hyc7575.github.io/2017/06/10/2017-06-10-vue-constructor-data-bind/"/>
    <id>http://hyc7575.github.io/2017/06/10/2017-06-10-vue-constructor-data-bind/</id>
    <published>2017-06-10T09:26:31.000Z</published>
    <updated>2017-11-26T11:33:07.555Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><h2 id="뷰-모델-생성"><a href="#뷰-모델-생성" class="headerlink" title="뷰 모델 생성"></a>뷰 모델 생성</h2><p>ViewModel을 생성하는 방법은 간단합니다. 전역에 부여되는 <code>Vue</code> 생성자로 생성한 인스턴스가 ViewModel이 됩니다. 인스턴스를 생성할 때 여러 옵션을 넘겨 줄 수 있는데 이번 예제로 어떠한 옵션들이 있는지 살펴보고자 합니다.</p><p>사전 준비 작업은 진행하지 않겠습니다. (파일에 cdn 으로 스크립트 한 줄 추가 해주세요.)</p><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> <span class="comment">&lt;!-- el 부분 --&gt;</span></div><div class="line">    &#123;&#123;text&#125;&#125; <span class="comment">&lt;!-- data binding은 머스타치 템플릿 구문 사용 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line">    &#123;&#123;otherText&#125;&#125; <span class="comment">&lt;!-- computed 되고 있는 데이터 --&gt;</span></div><div class="line">　</div><div class="line">    <span class="comment">&lt;!-- 메서드의 changeText를 v-on디렉티브를 이용하여 바인드, @click="changeText"로 축약 가능 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"changeText"</span>&gt;</span>버튼!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>script</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>, <span class="comment">// 마운트 할 DOM 엘리먼트</span></div><div class="line">    data: &#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">'My Text'</span>,</div><div class="line">        <span class="attr">componentText</span>: <span class="string">'Hi ??'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123; <span class="comment">// 기능 메서드 그룹</span></div><div class="line">        changeText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// this가 app 인스턴스로 사용되기 위해 화살표 함수를 사용하면 안됩니다.</span></div><div class="line">            <span class="keyword">this</span>.text = <span class="string">'My Changed Text'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        <span class="comment">// 의존하고 있는 반응형 속성(data 객체)이 변경될 때 마다 다시 초기화 됩니다.</span></div><div class="line">        otherText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// 마찬가지로 화살표 함수를 사용하면 안됩니다.</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.text + <span class="string">', yeah!!'</span> <span class="comment">// this.text 의존</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">components</span>: &#123; <span class="comment">// component 그룹, #app 에서만 사용 가능한 child component</span></div><div class="line">        <span class="string">'test-component'</span>: &#123;</div><div class="line">            <span class="comment">// this.$parent로 부모 인스턴스에 접근 합니다.</span></div><div class="line">            template: <span class="string">'&lt;p&gt;&lt;i&gt;&#123;&#123;this.$parent.componentText&#125;&#125;&lt;/i&gt;&lt;/p&gt;'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>결과 화면</li></ul><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="WOrqLM" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="WOrqLM" class="codepen">See the Pen <a href="https://codepen.io/small/pen/WOrqLM/" target="_blank" rel="external">WOrqLM</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>주석으로 간단하게나마 설명을 달아두었습니다만 한번 더 천천히 살펴보겠습니다.</p><ul><li><p>el: 해당 인스턴스를 <code>마운트 할 DOM을 선택</code>합니다. 이는 new를 사용하여 인스턴스를 생성할 경우에만 사용됩니다. (다른 경우는 뒤에서)</p></li><li><p>data: 해당 인스턴스의 데이터 객체입니다. <code>기본 객체</code> 형태여야만 하며 인스턴스화 하면서 이 속성들을 <code>반응형</code>으로 만들어줍니다. 반응형이라는 시스템은 Vue.js에서 굉장히 중요한 요소입니다. 현재는 해당 속성이 변경되면 내부에서 이를 감지하여 다시 화면에 랜더링 해준다는 정도만 기억 해둡시다. 콘솔창을 열어서 <code>app.text = &#39;some text&#39;;</code>라고 입력해 봅시다. 어떤 의미인지 이해 되실거라고 생각됩니다. 자세한 내용은 뒤에서 따로 정리를 해보도록 할 예정입니다.</p></li><li><p>methods: 메서드들을 정의하는 객체 입니다. 인스턴스를 통해 직접 접근하거나( 콘솔에서 app.changeText(); ) 혹은 <code>v-on</code>이라는 디렉티브를 이용하여 사용할 수 있습니다.</p></li><li><p>computed: computed의 속성들은 <code>data의 속성들에 의존</code>합니다. data의 속성이 바뀔 때 마다 이를 의존하고 있는 속성은 계속 업데이트 될 것 입니다. 버튼을 클릭하여 text 라는 데이터를 변경하면 이를 의존하고 있는 otherText도 같이 변경되는 것을 볼 수 있습니다.</p></li><li><p>components: 해당 인스턴스에서 사용할 수 있는 <strong>컴포넌트를 정의</strong> 합니다. <code>el속성의 영역에서만 사용 가능</code>합니다. (Vue.component()를 사용하여 전역으로도 컴포넌트 생성이 가능합니다.)</p></li></ul><p>자주 사용되는 옵션들 중 몇가지를 살펴 보았습니다. 설명을 진행하다보니 <strong>뒤에서 라는 말 혹은 예제에 언급되지 않은 문법</strong> 등이 설명 중간중간에 섞여 있습니다. 현재 모든 것을 다 설명하기에는 너무나도 큰 영역이기 때문에 현재는 이 정도의 이해만을 목표로 해도 괜찮습니다. Vue.js가 어떤 흐름으로 동작하는지, 어떠한 특성을 가지고 있는지 단편적으로 살펴 보기에는 충분할 것이라 생각 합니다. 다음에는 Vue 인스턴스의 라이프사이클에 대해서 잠깐 알아보도록 하겠습니다.</p><!-- 다음에는 디렉티브(지시자)라는 것에 대해서 알아보려고 합니다. 이번 예제에서는 이벤트에 관련된 디렉티브가 등장했었는데요. 이를 보면 디렉티브란 것이 DOM 요소와 관련된 문법 이라는 것을 추측할 수 있습니다. -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;h2 id=&quot;뷰-모델-생성&quot;&gt;
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="data bind" scheme="http://hyc7575.github.io/tags/data-bind/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - 시작하기</title>
    <link href="http://hyc7575.github.io/2017/06/08/2017-06-08-vueJs-start/"/>
    <id>http://hyc7575.github.io/2017/06/08/2017-06-08-vueJs-start/</id>
    <published>2017-06-08T12:29:57.000Z</published>
    <updated>2017-11-26T11:33:07.554Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><h2 id="시작하기-앞서"><a href="#시작하기-앞서" class="headerlink" title="시작하기 앞서"></a>시작하기 앞서</h2><p>지난 주말 여기 저기서 들려오고 있으며 엄청난 성장세를 보여주고 있는 Vue.js의 공식 문서를 한번 읽어 보았습니다. 한글화가 굉장히 잘 되어있어서 금방금방 슝슝 스크롤을 내리면서 읽을 수 있더군요.(커뮤니티분들께 감사) 처음 문법을 보면서 느낀점은 마치 angular1 과 react를 합친 듯 한 기분이 들었습니다. 또 ‘러닝커브가 낮고 굉장히 효율적이다.’ 라는 소리가 괜히 나오는게 아닌것 같았습니다. 문서를 한번 읽어보니 어떤 흐름으로 흘러가는지 대충 파악이 가능했습니다. 사용 방법도 매우 간단하여 jquery처럼 문서에 스크립트 한줄 추가(이 방법이 best practice 라는건 아닙니다!)하거나 vue-cli와 같은 제너레이터를 이용하여 쉽게 webpack 혹은 browserify와 함께 사용할 수 있습니다. 진행하는 프로젝트 중 spring 위에서 프레임워크 없이 jquery를 기반으로 사용하는 것이 있는데 Vue.js라면 쉽게 특정 부분에서 사용할 수 있겠다 싶어서 바로 적용해 보았습니다. 결과부터 말하자면 아직 진행중이지만 꽤 괜찮은 것(기존 코드가 너무…) 같더군요. 물론 아직 지식이 부족해서 많은 삽질이 있었지만 나름 만족스럽게 진행되어 가고 있는 듯 합니다. 이 작업을 계기로 장기적으로 프로젝트에 조금씩 도입해가며 기초부터 한번 포스팅을 해보고자 해서 쓰게 되었습니다.</p><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>Vue.js는 이름에서 예상할 수 있듯 view작업에 초점을 맞춘 프레임워크입니다. 그래서인지 React와 많은 공통점을 가지고 있으며, 디렉티브(지시자)라는 문법이 등장하는데 이는 angular1에서 영감을 받아 상당 부분 개선되었다고 합니다. <a href="https://kr.vuejs.org/v2/guide/comparison.html" target="_blank" rel="external">이곳</a>에서 다른 프레임워크와 Vue.js가 어떻게 다른지 어떠한 부분이 효율적인지에 대해서 자세히 설명되어 있으니 관심이 있으신 분들은 한번 읽어보시길 바랍니다.</p><h2 id="호환"><a href="#호환" class="headerlink" title="호환"></a>호환</h2><p>공식적으로 es5를 지원하는 브라우저에서 사용가능하다고 합니다. es6 문법을 사용한다면 babel 컴파일을 거쳐야합니다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><ul><li>npm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i vue</div></pre></td></tr></table></figure><ul><li>cdn</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>프로젝트에 위 스크립트 한줄을 추가 함으로써 Vue.js를 사용할 수 있습니다. (.Vue 확장자를 쓰면 모듈식으로 사용도 가능하지만 예제는 이런 방식으로 하지 않겠습니다.)<br>ps - <code>create-react-app</code>과 같은 <code>vue-cli</code>라는 어플리케이션을 구성해주는 도구도 있습니다. 위에서 언급 하였듯, webpack or browserify의 설정까지 해주어서 편리합니다.</p><h2 id="간단한-어플리케이션"><a href="#간단한-어플리케이션" class="headerlink" title="간단한 어플리케이션"></a>간단한 어플리케이션</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">            &#123;&#123;text&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">                <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">                <span class="attr">data</span>: &#123;</div><div class="line">                    <span class="attr">text</span>: <span class="string">'test 입니다.'</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">// 콘솔에서 한번...</span></div><div class="line">            <span class="comment">// app.text = '바뀌어라!!';</span></div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="OgMRyZ" data-default-tab="js,result" data-user="small" data-embed-version="2" data-pen-title="OgMRyZ" class="codepen">See the Pen <a href="https://codepen.io/small/pen/OgMRyZ/" target="_blank" rel="external">OgMRyZ</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>Vue.js는 MVVM 패턴에 영감을 받았다고 합니다. 위 예제에서의 Vue 생성자는 MVVM(Model-View-ViewModel)중 <code>VM(ViewModel)을 생성</code>합니다. 이때 인자로 들어가는 객체를 통하여 여러 옵션을 지정해 줄 수 있습니다. 현재 예제에서는 정의한 data가 템플릿에서 <code>{{property}}</code> 와 같은 형태로 바인딩 된다는 것 입니다. 다른 옵션들에 대해서는 차차 알아가 보도록 하겠습니다.</p><h2 id="맺음"><a href="#맺음" class="headerlink" title="맺음"></a>맺음</h2><p>아직 저도 공부를 하는 입장인지라(만만히 보고 도입했다가 삽질 또 삽질…) 공식 문서를 기반으로 한 예제 및 느낀 점을 기록하는 용도로서의 포스팅이 될 것 같습니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://kr.vuejs.org/" target="_blank" rel="external">Vue.js 한글 문서</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;h2 id=&quot;시작하기-앞서&quot;&gt;
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - express-session 로그인(3/3)</title>
    <link href="http://hyc7575.github.io/2017/06/03/2017-06-03-NodeJs-session-with-login3/"/>
    <id>http://hyc7575.github.io/2017/06/03/2017-06-03-NodeJs-session-with-login3/</id>
    <published>2017-06-03T12:18:39.000Z</published>
    <updated>2017-11-26T11:33:07.554Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>패스워드와 같은 중요한 정보는 누군가에게 알려져서는 안되는 정보입니다. 만약 이 정보가 털리더라도 복호화를 할 수 없는 단방향 암호화를 사용하는것이 일반적이라고 할 수 있습니다. 그래서 2장까지 진행하였던 로그인 예제의 패스워드를 암호화 하여 저장하는 방법을 알아보려고 합니다. 사용되고 있는 여러 암호화 알고리즘이 있지만 저는 <a href="https://en.wikipedia.org/wiki/Bcrypt" target="_blank" rel="external">bcrypt</a>를 사용하도록 하겠습니다. <a href="https://en.wikipedia.org/wiki/PBKDF2" target="_blank" rel="external">pbkdf2</a>와 더불어 많이 쓰이는 방법 중 하나입니다.</p><p>가입을 진행할때 여태까지는 사용자가 입력한 값을 그대로 저장하였지만 암호화를 진행하고 생성된 Digest(암호화된 값)을 저장하면 됩니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">app.post(<span class="string">'/join'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> body = req.body;</div><div class="line">    <span class="keyword">if</span>( !findUser(body.user_id, body.user_pwd) ) &#123;</div><div class="line">    <span class="comment">// 아이디도 중복안되게 분기 해야는데 예제이므로..</span></div><div class="line">        <span class="keyword">const</span> salt = bcrypt.genSaltSync(<span class="number">10</span>); <span class="comment">// salt값 생성, 10이 default</span></div><div class="line">        <span class="keyword">const</span> hash = bcrypt.hashSync(body.user_pwd, salt); <span class="comment">// Digest</span></div><div class="line">        users.push(&#123;</div><div class="line">            <span class="attr">user_id</span>: body.user_id,</div><div class="line">            <span class="attr">user_pwd</span>: hash,</div><div class="line">            <span class="attr">user_nickname</span>: body.user_nickname</div><div class="line">        &#125;);</div><div class="line">    res.redirect(<span class="string">'/login'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.send(<span class="string">'이미 존재함'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>5, 6번 라인이 암호화를 진행하는 작업이다. salt라는 것 은 비밀번호를 암호화 하기 전에 랜덤한 값을 더하여 결과 값을 무작위로 만들어줍니다. 동일한 패스워드를 입력하더라도 생성된 값은 항상 다르게 되는것 이지요. 인자로 숫자가 들어가있는데 2^n만큼 해싱작업을 진행합니다.(자세한 내용은 범위가 작지 않은것 같으므로 생략하겠습니다.) 이제 생성된 값을 users에 저장합니다. 이제 비밀번호는 더 이상 우리가 입력한 값을 그대로 비교하는 것으로는 인증이 되지 않습니다. find하는 과정을 수정해야 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> findUser = <span class="function">(<span class="params">user_id, user_pwd</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// id와 password가 일치하는 유저 찾는 함수, 없으면 undefined 반환</span></div><div class="line">    <span class="keyword">return</span> users.find( <span class="function"><span class="params">v</span> =&gt;</span> (v.user_id === user_id &amp;&amp;  bcrypt.compareSync(user_pwd, v.user_pwd) ) );</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> findUserIndex = <span class="function">(<span class="params">user_id, user_pwd</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 일치하는 유저의 index값(유니크) 반환</span></div><div class="line">    <span class="keyword">return</span> users.findIndex( <span class="function"><span class="params">v</span> =&gt;</span> (v.user_id === user_id &amp;&amp; bcrypt.compareSync(user_pwd, v.user_pwd)) );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>사용자가 입력한 비밀번호를 <code>compareSync</code>를 사용하여 저장되어있는 비밀번호와 비교합니다. 일치하면 true를 반환해줄 것 입니다. 이제 암호화와 관련된 모든 작업을 마쳤습니다.</p><h2 id="맺음"><a href="#맺음" class="headerlink" title="맺음"></a>맺음</h2><p>저도 처음 공부해본 내용이라 혹 개념적으로 틀린 내용이 있다면 알려주시면 감사합니다 ㅠ</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.npmjs.com/package/bcrypt-nodejs" target="_blank" rel="external">bcrypt</a></li><li><a href="https://stackoverflow.com/questions/6832445/how-can-bcrypt-have-built-in-salts" target="_blank" rel="external">bcrypt동작</a> (db에 salt를 저장하지 않아서 어떻게 가지고 있나 찾아보다가 발견한 글 입니다)</li><li><a href="http://minix.tistory.com/406" target="_blank" rel="external">한국식 보안 상황에서 살아남는 법</a> (우연히 발견한 글인데 재미있게 봐서 공유합니다 보안쪽은 잘 모르는데 재미있게 잘 보았네요.)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;패스워드와 같은 중요한 정보는 누군가에게 
      
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="express-session" scheme="http://hyc7575.github.io/tags/express-session/"/>
    
      <category term="nodejs login" scheme="http://hyc7575.github.io/tags/nodejs-login/"/>
    
      <category term="bcrypt" scheme="http://hyc7575.github.io/tags/bcrypt/"/>
    
      <category term="암호화" scheme="http://hyc7575.github.io/tags/%EC%95%94%ED%98%B8%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - express-session 로그인(2/3)</title>
    <link href="http://hyc7575.github.io/2017/06/02/2017-06-02-Nodejs-session-with-login2/"/>
    <id>http://hyc7575.github.io/2017/06/02/2017-06-02-Nodejs-session-with-login2/</id>
    <published>2017-06-02T12:42:15.000Z</published>
    <updated>2017-11-26T11:33:07.554Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>2장에서는 로그인 및 가입에 관한 로직을 작성하겠습니다. 우선 로그인 form이 있는 login.ejs 파일을 만들겠습니다.</p><ul><li>login.ejs</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        아이디 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_id"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        비밀번호 :<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"user_pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p><code>/login</code> 엔드포인트로 post요청을 보내는 form입니다. 여기서 입력한 아이디와 패스워드로 가입되어있는 회원이라면 정상적으로 로그인 처리와 세션을 등록해주는 기능을 할 것 입니다.</p><ul><li>app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'login'</span>); <span class="comment">// login.ejs 랜더링</span></div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> body = req.body; <span class="comment">// body-parser 사용</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>( findUser( body.user_id, body.user_pwd ) ) &#123;</div><div class="line">    <span class="comment">// 해당유저가 존재한다면</span></div><div class="line">        req.session.user_uid = findUserIndex( body.user_id, body.user_pwd ); <span class="comment">//유니크한 값 유저 색인 값 저장</span></div><div class="line">        res.redirect(<span class="string">'/'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.send(<span class="string">'유효하지 않습니다.'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>매우 직관적인 코드여서 이해하기 어렵지 않을 것 입니다.(아마도..?)<br>해당 유저가 존재한다면 해당 유저의 유니크한 값(여기서는 인덱스)을 세션의 <code>user_uid</code>에 저장합니다. 로그인을 하였으면 로그아웃에 관한 기능이 필요한 것은 당연합니다.</p><ul><li>app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/logout'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">delete</span> req.session.user_uid;</div><div class="line">    res.redirect(<span class="string">'/'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>로그아웃 또한 매우 간단합니다. 세션에 저장되어있는 <code>user_uid</code> 프로퍼티를 삭제해주기만 하면 됩니다. 이제 로그인 로그아웃이 구현되었습니다. 이쯤에서 app.js를 실행 하고 테스트를 한번 해보도록 합시다.</p><p><img src="https://cloud.githubusercontent.com/assets/14171723/26726812/771361b8-47df-11e7-9811-241577044c12.png" alt="after login"></p><p>users 배열에 hyeok이라는 user_id를 가진 정보로 로그인을 해보았습니다. 정상적으로 닉네임이 표시되는 것을 확인할 수 있습니다. 만료기간을 따로 지정하지 않았기때문에 브라우저를 완전히 종료하지 않는 이상 이 세션은 그대로 유지될 것 입니다. 다음은 회원을 추가(가입)하는 기능을 해보겠습니다. 예상하셨겠지만 그냥 users 배열에 새로운 유저정보 객체를 push해주면 됩니다.</p><ul><li>join.ejs</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/join"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        아이디 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_id"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        비밀번호 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"user_pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        닉네임 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_nickname"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/join'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'join'</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/join'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> body = req.body;</div><div class="line">    <span class="keyword">if</span>( !findUser(body.user_id, body.user_pwd) ) &#123;</div><div class="line">        <span class="comment">// 아이디도 중복안되게 분기 해야는데 예제이므로..</span></div><div class="line">        users.push(&#123;</div><div class="line">            <span class="attr">user_id</span>: body.user_id,</div><div class="line">            <span class="attr">user_pwd</span>: body.user_pwd,</div><div class="line">            <span class="attr">user_nickname</span>: body.user_nickname</div><div class="line">        &#125;);</div><div class="line">        res.redirect(<span class="string">'/login'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.send(<span class="string">'이미 존재함'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>findUser를 통해 유저가 없다고 판단되면 users배열에 새로운 객체를 추가해줍니다. 이제 가입부터 로그인, 로그아웃 모든 기능이 구현되었습니다. 3장에서는 비밀번호를 암호화 하여 저장하는 방법을 알아보겠습니다. 사용할 암호화 방식은 <code>bcrypt</code> 알고리즘입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;2장에서는 로그인 및 가입에 관한 로직을 
      
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="express-session" scheme="http://hyc7575.github.io/tags/express-session/"/>
    
      <category term="nodejs login" scheme="http://hyc7575.github.io/tags/nodejs-login/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - express-session 로그인(1/3)</title>
    <link href="http://hyc7575.github.io/2017/06/02/2017-06-02-Nodejs-session-with-login/"/>
    <id>http://hyc7575.github.io/2017/06/02/2017-06-02-Nodejs-session-with-login/</id>
    <published>2017-06-02T04:45:56.000Z</published>
    <updated>2017-11-26T11:33:07.553Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>세션은 쿠키와 마찬가지로 웹 사이트로 부터 저장되는 데이터이며 조금 더 발전(?)한 기능입니다. 세션은 쿠키와는 다르게 사용자의 컴퓨터가 아닌 서버에 저장이 되며, 저장된 데이터는 세션을 생성하면서 사용자의 쿠키에 저장된 식별자 정보를 통해 접근할 수 있습니다. 누군가에게 알려져서는 안될 정보들은 보다 안전한 세션에 저장해두어야 합니다. <code>express-session</code>이라는 모듈을 사용하여 사용자의 로그인 인증정보를 세션에 저장하는 방법을 알아보겠습니다.</p><h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><ul><li>project<ul><li>views<ul><li>index.ejs</li><li>join.ejs</li><li>login.ejs</li></ul></li><li>app.js</li></ul></li></ul><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">npm i --save express ejs express-session body-parser bcrypt-nodejs</div></pre></td></tr></table></figure><p>회원을 추가하는 부분도 포함되었기 때문에 body-parser도 사용하였고, bcrypt-nodejs는 3장에서 살펴볼 암호화와 관련된 모듈입니다.</p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h3 id="세션-미들웨어-등록"><a href="#세션-미들웨어-등록" class="headerlink" title="세션 미들웨어 등록"></a>세션 미들웨어 등록</h3><ul><li>app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</div><div class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt-nodejs'</span>); <span class="comment">// 3장에서 사용할 암호화 모듈</span></div><div class="line">　</div><div class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line">　</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</div><div class="line">app.use(session(&#123;</div><div class="line">    <span class="attr">secret</span>: <span class="string">'ambc@!vsmkv#!&amp;*!#EDNAnsv#!$()_*#@'</span>,</div><div class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span></div><div class="line">&#125;));</div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><p>우선 세션 미들웨어 등록하는 방법부터 알아보겠습니다. 10번 라인을 보시면 express-session모듈에서 가져온 미들웨어를 등록하는 부분이 있습니다. 이 부분을 등록하면 요청시 마다 req.session으로 세션 객체에 접근할 수 있게 됩니다. 옵션으로 들어간 값을 한번 살펴보겠습니다.</p><ul><li><p>secret: secret은 필수로 들어가야하는 옵션입니다. 세션은 기본적으로 식별자를 쿠키에 저장하게 되는데 그 저장되는 데이터를 <strong>암호화</strong> 하기위해 필요한 옵션입니다.</p></li><li><p>resave: 요청이 왔을때 세션을 수정하지 않더라도 세션을 다시 저장소에 다시 저장되도록 합니다. 2개 이상의 병렬요청이 왔을 경우 원치 않은 저장이 이루어질 수 있으니 유의 해야합니다. (false 권장)</p></li><li><p>saveUninitialized: 초기화 되지 않은 세션을 강제로 저장합니다. 이는 모든 방문자들에게 고유한 식별 값을 주는 것과 같습니다.</p></li></ul><!-- (resave와 saveUninitialized의 **관계**가 조금 헷갈려서 자료를 찾아보았지만 명쾌한 자료를 찾을 수가 없었습니다. 그나마 괜찮은 자료는 [이것][link1] 입니다.) --><p>이제 라우팅 처리를 하기 전 회원과 관련된 몇몇 기능을 미리 만들어 두겠습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js 내부에 선언합니다.</span></div><div class="line"><span class="keyword">const</span> users = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">user_id</span>: <span class="string">'hyeok'</span>,</div><div class="line">        <span class="attr">user_nickname</span>: <span class="string">'혁'</span>,</div><div class="line">        <span class="attr">user_pwd</span>: <span class="string">'123456'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">user_id</span>: <span class="string">'hyc7575'</span>,</div><div class="line">        <span class="attr">user_nickname</span>: <span class="string">'에이치'</span>,</div><div class="line">        <span class="attr">user_pwd</span>: <span class="string">'1q2w3e4r'</span></div><div class="line">    &#125;</div><div class="line">]</div><div class="line"><span class="keyword">const</span> findUser = <span class="function">(<span class="params">user_id, user_pwd</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// id와 password가 일치하는 유저 찾는 함수, 없으면 undefined 반환</span></div><div class="line">    <span class="keyword">return</span> users.find( <span class="function"><span class="params">v</span> =&gt;</span> (v.user_id === user_id &amp;&amp; v.user_pwd === user_pwd) );</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> findUserIndex = <span class="function">(<span class="params">user_id, user_pwd</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 일치하는 유저의 index값(유니크) 반환</span></div><div class="line">    <span class="keyword">return</span> users.findIndex( <span class="function"><span class="params">v</span> =&gt;</span> (v.user_id === user_id &amp;&amp; v.user_pwd === user_pwd) );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>users라는 회원 로그인 정보와 해당 유저를 찾는함수 그리고 해당 유저의 인덱스값(유니크한 값으로써 사용)을 구하는 함수를 생성하였습니다. 기본적으로 필요로한 기능들은 만들어졌으니 라우팅 작업을 시작합니다.</p><ul><li>app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 미들웨어 아래쪽으로 배치해주세요.</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> sess = req.session; <span class="comment">// 세션 객체에 접근</span></div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">nickname</span>: sess.user_uid+<span class="number">1</span> ? users[sess.user_uid][<span class="string">'user_nickname'</span>] : <span class="string">''</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>index.ejs</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>( !<span class="attr">nickname</span> ) &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>로그인을 해주세요.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span>로그인<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/join"</span>&gt;</span>회원가입<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>안녕하세요. <span class="tag">&lt;<span class="name">%=</span> <span class="attr">nickname</span> %&gt;</span>님<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span>로그아웃<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>라우터에서 넘겨준 nickname값의 유무를 통해 로그인 여부를 판단하고 각각 다른 값을 랜더링 해주도록 만들었습니다.</p><p>이제 session을 사용하기위한 모든 준비가 끝났습니다. 미들웨어의 옵션으로 <code>saveUninitialized</code>값을 true로 설정해주었기 때문에 app.js를 실행하고 접속하면 아직 세션에 아무런 값도 설정해주지는 않았지만 쿠키에 고유한 식별값을 남겨두었을 것 입니다.<br><img src="https://cloud.githubusercontent.com/assets/14171723/26714475/7a8b74da-47ac-11e7-8a64-522a0f5df510.png" alt="connect.sid"><br>기본적으로 connect.sid라는 이름으로 저장됩니다. 이 쿠키값을 통해서 메모리에 저장되어있는 세션정보를 읽을 수 있는 것 입니다. 로그인 및 가입 구현은 2장에서 진행하겠습니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://github.com/expressjs/session" target="_blank" rel="external">express-session</a>에서 세션 설정에 관한 많은 옵션들을 살펴보실 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;세션은 쿠키와 마찬가지로 웹 사이트로 부터
      
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="express-session" scheme="http://hyc7575.github.io/tags/express-session/"/>
    
      <category term="nodejs login" scheme="http://hyc7575.github.io/tags/nodejs-login/"/>
    
  </entry>
  
  <entry>
    <title>Javascript(잡담) - new Array(n)의 undefined</title>
    <link href="http://hyc7575.github.io/2017/05/31/2017-05-31-javascript-newArray/"/>
    <id>http://hyc7575.github.io/2017/05/31/2017-05-31-javascript-newArray/</id>
    <published>2017-05-31T07:33:44.000Z</published>
    <updated>2017-11-26T11:33:07.553Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/26621663/7479b128-4622-11e7-9a27-96aa8bb863a6.png"/><p>작업중인 라이브러리의 메서드 중 인자로 들어오는 array들의 중복값을 리턴해주는 것이 있습니다. 이를 튜닝하면서 생긴 뻘짓을 쓰는 글 입니다. 성능 테스트를 하기 위해서 <code>new Array(10000000);</code> 형태로 배열을 만들어서 테스트 하였습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000000</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000000</span>);</div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100000000</span>);</div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10000000</span>);</div><div class="line">method(a,b,c,d); <span class="comment">// [];</span></div></pre></td></tr></table></figure><p>성능 자체는 만족스럽게 올라갔지만 예상했던 <code>[undefined]</code>가 출력되지 않음.. Array 생성자에 인자로 정수를 넣어주면 해당 길이만큼의 undefined를 가진 배열을 반환해주는 것으로 알고 있던 나는 indexOf 메서드를 사용해보았습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">a.indexOf(<span class="literal">undefined</span>); <span class="comment">// -1</span></div></pre></td></tr></table></figure><p>이상하다 생각되어서 되지도 않는 영어를 조합하며 구글링을 시작했지만 원하는 글은 찾아볼 수 없었고 심지어 indexOf를 사용하여 undefined를 검색하던 어떤 예제는 index값을 잘 반환하는 상황… 그 예제와 배열 생성하는 방법을 비교해보니<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="string">'test'</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]; <span class="comment">// 해당 예제</span></div><div class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">arr1.indexOf(<span class="literal">undefined</span>); <span class="comment">// 1</span></div><div class="line">arr2.indexOf(<span class="literal">undefined</span>); <span class="comment">// -1</span></div></pre></td></tr></table></figure></p><p>이 사실을 통해 예측할 수 있는 사실은 <code>new Array(n)</code>은 값이 할당되지 않고 length 속성만 지정해주지 않을까 라는 점이다. 콘솔에서 배열 내부를 열어보았다.<br><img src="https://cloud.githubusercontent.com/assets/14171723/26661897/6ec79062-46bb-11e7-8552-89dfed6067ac.png" alt="console array"></p><p>예상했던대로 값이 없고 length만 지정된 배열이 들어오게 되었습니다.( 저 undefined x 10 이라는 것 때문에 여태 undefined가 할당된줄 알았습니다 ㅠ ) 저 <code>a</code>라는 배열에 요소를 추가해보겠습니다.<br><img src="https://cloud.githubusercontent.com/assets/14171723/26662468/fcaaffc4-46be-11e7-93d7-112745424bbc.png" alt="add element"><br>0~9까지의 값이 <strong>할당되지 않았고</strong> 10번 인덱스부터 값이 할당 되었네요. javascript의 배열이 실상은 Array.prototype 을 상속받은 <code>객체</code>여서 그런게 아닐까 생각되네요.(근거 있는 답이 아니라 제 추측입니다.) 본론으로 돌아와서 값이 할당되지 않은 배열을 반환하기에 이 <code>a</code>라는 배열은 map이나 filter와 같은 메서드들은 제대로 동작을 하지 않게 될 것입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">a.map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(v, i);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>10번의 콘솔과 0이 10개가 담긴 배열을 반환해줘야할 것 처럼 보이지만 값이 할당되지 않은 배열이므로 예상했던 동작은 하지 않습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">a.push(<span class="string">'ha'</span>);</div><div class="line">a.map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(v, i);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ha 10</span></div><div class="line"><span class="comment">// [ 빈값 10개 , 0]</span></div></pre></td></tr></table></figure></p><p>이렇게 값을 명시적으로 할당해주어야 ha라는 값과 10 이라는 인덱스를 보여주고, 10번 인덱스에 0이라는 값 가진 배열을 출력해주네요. <strong>결론은 할당 되지 않았기 떄문에 성능테스트를 할 때 비어있는 배열을 반환해준 것 이였습니다!</strong> 의식의 흐름에 맡겨 막 쓴 글이여서 두서없고 막 삼천포로 빠지고 그랬던거 같아요…</p><p>　<br>　<br>ps - 불여우 콘솔에서는…<br><img src="https://cloud.githubusercontent.com/assets/14171723/26663318/e5f313a6-46c4-11e7-95a9-02d1fbd5fb09.png" alt="firefox console"></p><p>이럴수가 ㅠ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/26621663/7479b128-4622-11e7-9a27-96aa8bb863a6.png&quot;/&gt;&lt;p&gt;작업중인 라이브러리의 메서드 중 인자로 들
      
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="잡담" scheme="http://hyc7575.github.io/categories/Javascript/%EC%9E%A1%EB%8B%B4/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="array" scheme="http://hyc7575.github.io/tags/array/"/>
    
      <category term="javascript array" scheme="http://hyc7575.github.io/tags/javascript-array/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - cookie-parser</title>
    <link href="http://hyc7575.github.io/2017/05/30/2017-05-30-nodejs-cookie/"/>
    <id>http://hyc7575.github.io/2017/05/30/2017-05-30-nodejs-cookie/</id>
    <published>2017-05-30T05:14:29.000Z</published>
    <updated>2017-11-26T11:33:07.552Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>쿠키란 사용자의 컴퓨터에 웹 사이트로부터 저장된 작은 데이터 조각입니다. 이 데이터를 통하여 사용자의 정보 저장, 사이트 내의 움직임 추적, 중단 시점 체크 등 다양한 기능을 제공할 수 있습니다. 쿠키는 일반적으로 브라우저 하위의 폴더로 저장되게 됩니다. 지금 제가 사용하는 맥의 크롬을 기준으로는 <code>/Users/{username}/Library/Application Support/Google/Chrome/Default</code> 폴더의 Cookies라는 파일이 아닐까 합니다. (파일 내부 내용을 봐서는 맞는 것 같은데 정보의 팩트를 체크할 수 가 없네요 ㅠ) 이 파일의 내부를 살펴보면 각 쿠키당 서버의 정보가 있는걸 봐서는 특정 서버에서 만들어진 쿠키는 그 서버에 종속된다고 생각할 수 있겠습니다. 본격적으로 Node.js에서 쿠키를 사용하는 방법을 알아보겠습니다.</p><h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><ul><li>project<ul><li>app.js</li><li>package.json</li></ul></li></ul><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">npm i --save express cookie-parser</div></pre></td></tr></table></figure><p>cookie-parser와 express를 설치합니다. <code>parser</code>라는 이름에서 예상하셨을 수 있겠지만 기존에 배웠던 body-parser와 사용법이 거의 비슷합니다.</p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><ul><li>app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</div><div class="line">　</div><div class="line">app.use(cookieParser());</div><div class="line">　</div><div class="line">app.get(<span class="string">'/toggleChk'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.cookie(<span class="string">'checked'</span>, req.cookies.checked ? <span class="string">''</span> : <span class="string">'checked'</span>); <span class="comment">// set cookie</span></div><div class="line">    res.redirect(<span class="string">'/'</span>);</div><div class="line">&#125;);</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.send(<span class="string">`</span></div><div class="line">        &lt;input type="checkbox" <span class="subst">$&#123;req.cookies.checked&#125;</span>&gt;</div><div class="line">        &lt;a href="/toggleChk"&gt;쿠키 토글&lt;/a&gt;</div><div class="line">    `);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><p>cookie-parser 불러와서 미들웨어로 사용하겠다고 선언만 해주시면 <code>req.cookies</code>로 접근이 가능해집니다. 이제 app.js를 실행하고 <code>localhost:3000</code>에 접속하면 체크박스와 버튼(링크)하나가 보입니다. 이 체크박스는 checked라는 이름의 쿠키 값에 따라 체크가 되어있을수도 아닐수도 있습니다. 처음 실행하였다면 몇번을 새로고침 하여도 체크가 되어있지 않을 것 입니다. 이제 쿠키 토글버튼을 클릭해봅시다. 체크가 되어있는 것을 볼 수 있습니다. 이 버튼(링크)은 checked라는 쿠키를 설정하고 루트경로로 이동시켜주는 요청메서드 였습니다. 이제는 몇번을 새로고침하여도 체크박스에는 체크가 되어있을 것 입니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://github.com/expressjs/cookie-parser" target="_blank" rel="external">cookie-parser</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;쿠키란 사용자의 컴퓨터에 웹 사이트로부터 
      
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="cookie-parser" scheme="http://hyc7575.github.io/tags/cookie-parser/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - body-parser와 multer</title>
    <link href="http://hyc7575.github.io/2017/05/24/2017-05-24-node-js-bodyparserAndMulter/"/>
    <id>http://hyc7575.github.io/2017/05/24/2017-05-24-node-js-bodyparserAndMulter/</id>
    <published>2017-05-24T05:31:33.000Z</published>
    <updated>2017-11-26T11:33:07.552Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>Node.js에서 form양식을 submit을 하기위해 사용되는 <a href="https://github.com/expressjs/body-parser" target="_blank" rel="external">body-parser</a>와 <a href="https://github.com/expressjs/multer" target="_blank" rel="external">multer</a> 미들웨어에 대해서 간단하게 알아보려 합니다. 각 미들웨어의 용도를 짧게 소개하면 <code>body-parser</code>는 <a href="https://hyc7575.github.io/2017/05/16/2017-05-16-nodejs-express-router-middleware/">라우터와 미들웨어</a> 예제때 언급하였듯 요청 바디를 파싱하여서 req.body 객체로 접근할 수 있도록 도와주고, <code>multer</code>는 파일을 업로드를 도와주는 미들웨어 입니다.</p><h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><ul><li>project<ul><li>uploads</li><li>views<ul><li>form.ejs</li></ul></li><li>app.js</li><li>package.json</li></ul></li></ul><p>uploads폴더는 업로드한 파일들이 들어가는 폴더입니다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">npm i --save body-parser multer express ejs</div></pre></td></tr></table></figure><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><p>body-parser부터 차근차근 진행하도록 하겠습니다.</p><ul><li>form.ejs<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        *&#123;margin:0; padding: 0;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/userForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>이름<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userAge"</span>&gt;</span>나이<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"userAge"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userAge"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userJob"</span>&gt;</span>직업<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"userJob"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userJob"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"전송"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><code>/userForm</code> 포인트로 post요청을 보내는 form을 생성합니다.</p><ul><li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line">　</div><div class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line">　</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</div><div class="line">app.use(bodyParser.json()); <span class="comment">// 이번예제에서는 사용되지 않습니다...</span></div><div class="line">　</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'form'</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/userForm'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(req.body);</div><div class="line">    res.json(req.body);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></li></ul><p><code>/userForm</code>으로 post요청이 들어오게되면 req.body객체를 웹페이지에 json형태로 뿌려주도록 하였습니다. 이 상태로 어플리케이션을 실행하여 테스트 해봅니다.</p><p><code>{&quot;userName&quot;: &quot;hyeok&quot;, &quot;userAge&quot;: &quot;20&quot;, &quot;userJob&quot;: &quot;Front-end developer&quot;}</code> 아마 이러한 형태의 결과를 보실 수 있으시라 생각합니다. 이전 포스팅에서 언급하였듯 form submit이 발생시 기본적으로 Content-Type이 x-www-form-urlencoded로 요청이 들어오는데 이 경우 <code>bodyParser.urlencoded()</code>가 input의 name과 매칭된 req.body 객체를 생성해줍니다. 이제 파일 업로드를 추가해보도록 하겠습니다.</p><ul><li>form.ejs<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/userForm"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userImage"</span>&gt;</span>사진<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"userImage"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"userImage"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p>input file이 들어간 로우 하나를 테이블에 추가하고, form태그의 enctype을 multipart/form-data로 명시해줍니다. 인코딩 타입을 이렇게 지정해야지만 form태그로 file전송을 할 수 있습니다.</p><ul><li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>); <span class="comment">// 이 예제에서는 bodyParser가 필요하지 않지만...</span></div><div class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</div><div class="line"><span class="keyword">const</span> upload = multer(&#123;<span class="attr">dest</span>: <span class="string">'uploads/'</span>&#125;); <span class="comment">// uploads 폴더에 파일을 저장</span></div><div class="line">　</div><div class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line">　</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;)); <span class="comment">// 이번예제에서는 사용되지 않지만...</span></div><div class="line">app.use(bodyParser.json()); <span class="comment">// 이번예제에서는 사용되지 않지만...</span></div><div class="line">　</div><div class="line">app.use(express.static(<span class="string">'uploads'</span>)); <span class="comment">// 업로드된 이미지를 요청하여 표시한다면 넣어줍시다.</span></div><div class="line">　</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'form'</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/userForm'</span>, upload.single(<span class="string">'userImage'</span>), (req, res) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(req.body);</div><div class="line">    <span class="built_in">console</span>.log(req.file);</div><div class="line">    res.send(<span class="string">`</span></div><div class="line">        body: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(req.body)&#125;</span>,&lt;br/&gt;</div><div class="line">        file: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(req.file)&#125;</span></div><div class="line">    `);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></li></ul><p><code>multer({dest: &#39;uploads/&#39;});</code> 이 함수는 미들웨어를 리턴하며, 옵션으로 들어간 dest의 value인 uploads에(폴더) 파일을 저장하겠다고 설정한 것 입니다. 그리고 리턴된 이 미들웨어는 <code>/userForm</code>에 post요청이 왔을 때 인자로 전해지는 <code>upload.single(&#39;userImage&#39;)</code> 미들웨어( 인자는 input file의 name값 )로 사용됩니다. 이 단계에서 req.body와 req.file에 접근 가능하도록 도와줍니다.( Content-Type이 multipart/form-data여서 body-parser가 해주지 않아요 ) 이제 어플리케이션을 실행하고 테스트를 진행합니다.</p><p>body와 file의 정보가 객체형태로 넘어오고 uploads폴더에 파일이 저장되는것을 볼 수 있지만 이름이 랜덤하고 확장자도 없이 들어오고 있습니다. <code>storage</code>라는 것을 사용하여 파일이 디스크에 저장될때를 컨트롤할 수 있다고 하니 사용해보도록 합시다.</p><ul><li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</div><div class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</div><div class="line">    <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</div><div class="line">        cb(<span class="literal">null</span>, <span class="string">'uploads/'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</div><div class="line">        cb(<span class="literal">null</span>, <span class="built_in">Date</span>.now() + <span class="string">'_'</span> + file.originalname);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> upload = multer(&#123;<span class="attr">storage</span>: storage&#125;);</div></pre></td></tr></table></figure></li></ul><p>큰 변화는 없고 multer의 인자로 dest대신 storage를 설정해줍니다. destination은 파일이 저장될 위치이고, filename은 저장되는 파일의 이름을 설정합니다. 임시방편으로 Date.now()를 사용하였지만 유니크한 값을 만들어주는 모듈들을 설치하여서 사용하는 것을 추천 드립니다. 다시 한번 저장 후 어플리케이션을 실행하면 원본이름을 포함하고 있는 파일이 저장되어 있는 것을 볼 수 있습니다.</p><h2 id="맺음"><a href="#맺음" class="headerlink" title="맺음"></a>맺음</h2><p>예제에서는 upload.single()을 사용하여 하나의 파일만을 업로드하는 경우를 살펴보았지만, upload.array()나 upload.fields() 등 을 사용하면 여러 파일을 업로드할 수 있습니다. 자세한 내용은 <a href="https://github.com/expressjs/multer" target="_blank" rel="external">링크</a>에서 확인해 보실 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;Node.js에서 form양식을 submi
      
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="body-parser" scheme="http://hyc7575.github.io/tags/body-parser/"/>
    
      <category term="bodyParser" scheme="http://hyc7575.github.io/tags/bodyParser/"/>
    
      <category term="multer" scheme="http://hyc7575.github.io/tags/multer/"/>
    
      <category term="form submit" scheme="http://hyc7575.github.io/tags/form-submit/"/>
    
  </entry>
  
</feed>
