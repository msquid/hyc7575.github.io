<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hyc7575 blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hyc7575.github.io/"/>
  <updated>2017-06-27T01:36:54.000Z</updated>
  <id>http://hyc7575.github.io/</id>
  
  <author>
    <name>keunhyeok jeon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue.js - Directive(지시자) 1/2</title>
    <link href="http://hyc7575.github.io/2017/06/27/2017-06-21-vue-directive/"/>
    <id>http://hyc7575.github.io/2017/06/27/2017-06-21-vue-directive/</id>
    <published>2017-06-27T01:36:24.000Z</published>
    <updated>2017-06-27T01:36:54.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><p>디렉티브란 Vue.js 에서 사용되는 특별한 속성 입니다. Angular1 을 사용해보셨던 분들은 익숙할 것 입니다. Angular에서 <code>ng-</code> 를 사용한다면 Vue 에서는 <code>v-</code> 라는 접두사를 사용합니다. 이번 포스팅에서는 Vue.js 에서 기본적으로 제공하는 디렉티브 몇가지를 알아보려고 합니다.</p>
<h2 id="v-text와-v-html"><a href="#v-text와-v-html" class="headerlink" title="v-text와 v-html"></a>v-text와 v-html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    &#123;&#123;text&#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- &#123;&#123;text&#125;&#125; 와 동일 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"htmlText"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">'안녕안녕~'</span>,</div><div class="line">        <span class="attr">htmlText</span>: <span class="string">'&lt;span style="color: red"&gt;하이하이~&lt;/span&gt; !!'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p></p><p data-height="300" data-theme-id="11131" data-slug-hash="KqmeoZ" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="KqmeoZ" class="codepen">See the Pen <a href="https://codepen.io/small/pen/KqmeoZ/" target="_blank" rel="external">KqmeoZ</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<ul>
<li><p>v-text: <code>{{ }}</code> 와 같은 기능을 합니다. 해당 엘리먼트의 값이 data의 text 값으로 설정 된 것을 볼 수 있습니다.</p>
</li>
<li><p>v-html: html 코드를 랜더링 할 경우 사용합니다. v-text나 머스타치 구문을 사용할 경우 해당 string값 그대로 표시됩니다.</p>
</li>
</ul>
<h2 id="v-show와-v-if"><a href="#v-show와-v-if" class="headerlink" title="v-show와 v-if"></a>v-show와 v-if</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-if<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggleText"</span>&gt;</span>토글<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 이벤트 바인딩 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">isShow</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">text</span>: <span class="string">'보일까 말까!'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">toggleText</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>v-show와 v-if 모두 화면에 표시하는지 안하는지에 대한 지시자 입니다.</p>
<ul>
<li><p>v-show: css의 display 속성에 의하여 컨트롤 됩니다. 값이 false여도 랜더링은 되지만  display: none 처리가 되어있는 것 입니다.</p>
</li>
<li><p>v-if: 해당 엘리먼트의 랜더링 여부가 판단됩니다. 값이 false면 랜더링이 되지 않습니다. true라면 랜더링이 될 것이며 true에서 false로 변경될 때는 해당 엘리먼트가 삭제됩니다.</p>
</li>
</ul>
<p>아래 이미지를 보면 v-if는 해당 엘리먼트가 랜더링 되지 않았고, v-show 경우 display: none 처리가 되어있는 것을 보실 수 있습니다.</p>
<p><img src="https://user-images.githubusercontent.com/14171723/27375487-5582b6dc-56aa-11e7-8426-d13e7ea241c3.png" alt="v-if"></p>
<p></p><p data-height="300" data-theme-id="11131" data-slug-hash="mwmzRd" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="mwmzRd" class="codepen">See the Pen <a href="https://codepen.io/small/pen/mwmzRd/" target="_blank" rel="external">mwmzRd</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<h3 id="v-if의-else"><a href="#v-if의-else" class="headerlink" title="v-if의 else"></a>v-if의 else</h3><p>if문이 있으니 else 와 else if도 자연스럽게 따라오게 됩니다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"state === 0"</span>&gt;</span></div><div class="line">        if 입니다.</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"state === 1"</span>&gt;</span></div><div class="line">        else if 입니다.</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">        else 입니다.</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeState"</span>&gt;</span>토글<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">state</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">changeState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// 0 ~ 2 랜덤 부여</span></div><div class="line">            <span class="keyword">var</span> state = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">3</span>, <span class="number">10</span>);</div><div class="line">            alert(state);</div><div class="line">            <span class="keyword">this</span>.state = state;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p></p><p data-height="300" data-theme-id="11131" data-slug-hash="MomzyZ" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="MomzyZ" class="codepen">See the Pen <a href="https://codepen.io/small/pen/MomzyZ/" target="_blank" rel="external">MomzyZ</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>바로 v-else-if와 v-else는 <code>바로 이전 형제엘리먼트가 v-if</code> 일 경우 사용한다는 점만 기억해두시면 됩니다. ( 우리가 아는 if와 같습니다! )</p>
<h2 id="v-for-디렉티브"><a href="#v-for-디렉티브" class="headerlink" title="v-for 디렉티브"></a>v-for 디렉티브</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-for example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"array-area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>array<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in arrayItem"</span>&gt;</span>&#123;&#123;index&#125;&#125; : &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"obj-area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>object<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"(item, key, index) in objItem"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"num-area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>number<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"n in 7"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"string-area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>string<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"s in text"</span>&gt;</span>&#123;&#123;s&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">arrayItem</span>: [<span class="string">'arr1'</span>, <span class="string">'arr2'</span>, <span class="string">'arr3'</span>, <span class="string">'arr4'</span>],</div><div class="line">        <span class="attr">objItem</span>: &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'hyeok'</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line">            <span class="attr">job</span>: <span class="string">'front end developer'</span>,</div><div class="line">            <span class="attr">birthday</span>: <span class="string">'0927'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">text</span>: <span class="string">'안녕해요!'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p></p><p data-height="300" data-theme-id="11131" data-slug-hash="gRRgzX" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="gRRgzX" class="codepen">See the Pen <a href="https://codepen.io/small/pen/gRRgzX/" target="_blank" rel="external">gRRgzX</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>v-for디렉티브는 굉장히 자주 사용되는 디렉티브 중 하나 입니다. 이 디렉티브는 기본적으로 <code>alias in(of) expression</code> 문법을 사용하며 expression자리에는 뷰모델의 데이터 들 중 Array, Object, Number, String 형태를 가진 값들이 올 수 있습니다.</p>
<ul>
<li><p>Array: 배열을 순환하며 alias 에 해당 인덱스의 값을 부여합니다. <code>(alias, index) in expression</code> 형태로 변경하여 인덱스 값 또한 넘겨받을 수 있습니다.</p>
</li>
<li><p>Object: 배열과 마찬가지로 객체를 순환합니다. 순환 순서는 Object.keys()로 나열된 키의 순서로 결정됩니다. <code>(alias, key, index) in expression</code> 형태로 사용이 가능합니다.</p>
</li>
<li><p>Number: expression의 값 만큼 순환하며 그 값은 1부터 시작합니다.</p>
</li>
<li><p>String: 문자열을 한자 한자 쪼개 한 단어씩 순환하며 표기합니다.</p>
</li>
</ul>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul>
<li><a href="https://kr.vuejs.org/v2/api/#디렉티브" target="_blank" rel="external">Vue 디렉티브</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;p&gt;디렉티브란 Vue.js 에
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="directive" scheme="http://hyc7575.github.io/tags/directive/"/>
    
      <category term="디렉티브" scheme="http://hyc7575.github.io/tags/%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C/"/>
    
      <category term="지시자" scheme="http://hyc7575.github.io/tags/%EC%A7%80%EC%8B%9C%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - LifeCycle</title>
    <link href="http://hyc7575.github.io/2017/06/14/2017-06-14-vue-lifeCycle/"/>
    <id>http://hyc7575.github.io/2017/06/14/2017-06-14-vue-lifeCycle/</id>
    <published>2017-06-14T00:44:26.000Z</published>
    <updated>2017-06-22T01:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><p>라이프사이클이란 Vue 생성자의 호출 시점부터 mount 되기까지, 나아가 destroy 되기까지의 특정 시점들에 실행되는 메서드들 입니다. 아래 그림의 붉은 테두리를 가진 기호들이 Vue.js의 라이프사이클의 각 실행 시점입니다. (Vue.js가 어떤 흐름으로 동작하는지도 잘 나타나 있어서 많은 도움이 됩니다.)</p>
<p><img src="https://user-images.githubusercontent.com/14171723/27110978-f53bed4c-50e7-11e7-97b0-266c2244487c.png" alt="life-cyle"><br>출처 - <a href="https://vuejs.org/" target="_blank" rel="external">Vue.js 공식문서</a></p>
<p>위에서부터 아래로 쭉 실행됩니다. 흐름자체는 그림만으로도 충분히 이해가 가능할 것 이라고 생각합니다. 그러면 이제 각 라이프사이클 메서드들이 어떤 특징을 가지고 있는지 예제를 통하여 살펴봅시다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><ul>
<li>html</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    &#123;&#123;text&#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeText"</span>&gt;</span>변경!!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroyApp"</span>&gt;</span>파괴!?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>@click</code>이 지난 예제에 있던 <code>v-on</code>의 약자입니다. (이벤트를 등록합니다.)</p>
<ul>
<li>script</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">'안녕하세요~'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">changeText</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.text = <span class="string">'반갑습니다!'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">destroyApp</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.group(<span class="string">'--- destroyApp method ---'</span>);</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span> === app);</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$destroy());</div><div class="line">            <span class="built_in">console</span>.groupEnd();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">beforeCreate</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 아직 데이터 및 이벤트 정의 안됨</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- beforeCreate ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'text : '</span>, <span class="keyword">this</span>.text); <span class="comment">// undefined</span></div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">created</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 데이터와 이벤트는 접근 가능하지만, 아직 마운트가 안되서 $el 접근 불가</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- created ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'text : '</span>, <span class="keyword">this</span>.text); <span class="comment">// 안녕하세요~</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'element :'</span>, <span class="keyword">this</span>.$el); <span class="comment">// undefined</span></div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// el에 접근이 가능합니다. 보통 여기서 초기 데이터를 불러오곤 합니다.</span></div><div class="line">        <span class="comment">// beforeMount 에서는 el 접근 불가합니다.</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- mounted ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'element : ↓'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el); <span class="comment">// object HTMLDivElement</span></div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// data가 변경된 후 DOM 랜더링 직전에 실행 됩니다. 그로 인해 변경될 text data를 가지고 있는 것 입니다.</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- beforeUpdate ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'before update : '</span>, <span class="keyword">this</span>.text); <span class="comment">// 반갑습니다!</span></div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// DOM 랜더링이 끝난 후 실행됩니다. DOM 변경이 완료 된 후 특정 작업을 실행해야할 경우 이곳에..</span></div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- updated ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'updated : '</span>, <span class="keyword">this</span>.text); <span class="comment">// 반갑습니다!</span></div><div class="line">        <span class="built_in">console</span>.groupEnd()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'--- destroyed ---'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'watcher : '</span>, <span class="keyword">this</span>._watcher.active);</div><div class="line">        <span class="keyword">this</span>.text = <span class="string">'변해라 ㅠ 안변한다 ㅠ'</span>;</div><div class="line">        <span class="built_in">console</span>.groupEnd();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p></p><p data-height="300" data-theme-id="11131" data-slug-hash="awmZRa" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="awmZRa" class="codepen">See the Pen <a href="https://codepen.io/small/pen/awmZRa/" target="_blank" rel="external">awmZRa</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>아마 codepn을 embed해서 <code>현재 블로그 페이지의 콘솔</code>에서 제가 작성한 예제의 로그들이 나타날 것 입니다.(혹시 안나온다면 예제 복사하셔서 보시면 됩니다.. ㅠ)</p>
<p><img src="https://user-images.githubusercontent.com/14171723/27120796-e4b3309c-511f-11e7-9e63-49a6c96cc2b3.png" alt="console"><br><code>예제 실행 -&gt; 변경 버튼 클릭 -&gt; 파괴 버튼 클릭</code>을 한 모습입니다.</p>
<ul>
<li><p>beforeCreate : 해당 영역에서는 data의 text를 접근할 수 없었습니다. 해당 시점에서는 아직 어떠한 설정이 되지 않았기 때문에 data는 물론 methods에도 접근할 수 없는 상태입니다.</p>
</li>
<li><p>created : 이벤트 및 데이터 설정이 완료되었습니다. 하지만 아직 템플릿이나 DOM이 마운트가 되어있지 않습니다. this.data는 제대로 가져오는 반면 this.$el 을 undefined로 반환해주고 있습니다.</p>
</li>
<li><p>beforeMount : 마운트 바로 이전 시점이며 <a href="https://kr.vuejs.org/v2/guide/render-function.html" target="_blank" rel="external">render</a>라는 메서드가 호출되는 시점입니다. 역시 this.$el 은 아직 접근 불가능합니다. 아마 beforeMount는 사용할 일이 많지 않을 것 입니다. (redenr 메서드는 추후에 다뤄보도록 하겠습니다.)</p>
</li>
<li><p>mounted : 마운트가 완료된 시점이며, this.$el 에 접근이 가능해집니다. 보통 이 부분에서 ajax를 호출하여 데이터를 불러옵니다.</p>
</li>
<li><p>beforeUpdate : changeText 메서드를 실행시켜 text data를 변경 후 실행됩니다. 데이터는 변경되어있는 상태이며 DOM 랜더링만 되지 않은 상태이기 떄문에 this.text가 <code>랜더링될 예정</code>인 반갑습니다! 를 반환해 줍니다.</p>
</li>
<li><p>updated : beforeUpdate 후 DOM 랜더링 까지 완료 된 후 실행되는 시점입니다.</p>
</li>
<li><p>beforeDestroy : 파기되기 직전의 상태입니다. 해당 인스턴스는 이 시점까지 완벽한(?) 동작을 수행합니다.</p>
</li>
<li><p>destroyed : 모든 기능이 파기 된 후 호출됩니다. 모든 이벤트가 제거되어있으며 하위에 존재하는 인스턴스 모두 삭제 됩니다. <code>this._watcher.active</code>가 false를 반환하며 더이상 감시하지 않는다는 상태를 알려줍니다.</p>
</li>
</ul>
<p>ps - 그림에는 없지만 Vue.js 2.2.0 부터 <code>&lt;keep-alive&gt;</code> 라는 기본 내장 컴포넌트에서 <code>activated</code>와 <code>deactivated</code>라는 라이프 사이클이 동작한다고 합니다만 이번 포스팅에서는 다루지 않겠습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;p&gt;라이프사이클이란 Vue 생
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="LifeCycle" scheme="http://hyc7575.github.io/tags/LifeCycle/"/>
    
      <category term="라이프사이클" scheme="http://hyc7575.github.io/tags/%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4/"/>
    
      <category term="생명주기" scheme="http://hyc7575.github.io/tags/%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - 뷰 모델 생성과 데이터 바인딩</title>
    <link href="http://hyc7575.github.io/2017/06/10/2017-06-10-vue-constructor-data-bind/"/>
    <id>http://hyc7575.github.io/2017/06/10/2017-06-10-vue-constructor-data-bind/</id>
    <published>2017-06-10T09:26:31.000Z</published>
    <updated>2017-06-14T06:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><h2 id="뷰-모델-생성"><a href="#뷰-모델-생성" class="headerlink" title="뷰 모델 생성"></a>뷰 모델 생성</h2><p>ViewModel을 생성하는 방법은 간단합니다. 전역에 부여되는 <code>Vue</code> 생성자로 생성한 인스턴스가 ViewModel이 됩니다. 인스턴스를 생성할 때 여러 옵션을 넘겨 줄 수 있는데 이번 예제로 어떠한 옵션들이 있는지 살펴보고자 합니다.</p>
<p>사전 준비 작업은 진행하지 않겠습니다. (파일에 cdn 으로 스크립트 한 줄 추가 해주세요.)</p>
<ul>
<li>html</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> <span class="comment">&lt;!-- el 부분 --&gt;</span></div><div class="line">    &#123;&#123;text&#125;&#125; <span class="comment">&lt;!-- data binding은 머스타치 템플릿 구문 사용 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test-component</span>&gt;</span><span class="tag">&lt;/<span class="name">test-component</span>&gt;</span></div><div class="line">    &#123;&#123;otherText&#125;&#125; <span class="comment">&lt;!-- computed 되고 있는 데이터 --&gt;</span></div><div class="line">　</div><div class="line">    <span class="comment">&lt;!-- 메서드의 changeText를 v-on디렉티브를 이용하여 바인드, @click="changeText"로 축약 가능 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"changeText"</span>&gt;</span>버튼!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>script</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>, <span class="comment">// 마운트 할 DOM 엘리먼트</span></div><div class="line">    data: &#123;</div><div class="line">        <span class="attr">text</span>: <span class="string">'My Text'</span>,</div><div class="line">        <span class="attr">componentText</span>: <span class="string">'Hi ??'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123; <span class="comment">// 기능 메서드 그룹</span></div><div class="line">        changeText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// this가 app 인스턴스로 사용되기 위해 화살표 함수를 사용하면 안됩니다.</span></div><div class="line">            <span class="keyword">this</span>.text = <span class="string">'My Changed Text'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        <span class="comment">// 의존하고 있는 반응형 속성(data 객체)이 변경될 때 마다 다시 초기화 됩니다.</span></div><div class="line">        otherText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// 마찬가지로 화살표 함수를 사용하면 안됩니다.</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.text + <span class="string">', yeah!!'</span> <span class="comment">// this.text 의존</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">components</span>: &#123; <span class="comment">// component 그룹, #app 에서만 사용 가능한 child component</span></div><div class="line">        <span class="string">'test-component'</span>: &#123;</div><div class="line">            <span class="comment">// this.$parent로 부모 인스턴스에 접근 합니다.</span></div><div class="line">            template: <span class="string">'&lt;p&gt;&lt;i&gt;&#123;&#123;this.$parent.componentText&#125;&#125;&lt;/i&gt;&lt;/p&gt;'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>결과 화면</li>
</ul>
<p></p><p data-height="300" data-theme-id="11131" data-slug-hash="WOrqLM" data-default-tab="result" data-user="small" data-embed-version="2" data-pen-title="WOrqLM" class="codepen">See the Pen <a href="https://codepen.io/small/pen/WOrqLM/" target="_blank" rel="external">WOrqLM</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>주석으로 간단하게나마 설명을 달아두었습니다만 한번 더 천천히 살펴보겠습니다.</p>
<ul>
<li><p>el: 해당 인스턴스를 <code>마운트 할 DOM을 선택</code>합니다. 이는 new를 사용하여 인스턴스를 생성할 경우에만 사용됩니다. (다른 경우는 뒤에서)</p>
</li>
<li><p>data: 해당 인스턴스의 데이터 객체입니다. <code>기본 객체</code> 형태여야만 하며 인스턴스화 하면서 이 속성들을 <code>반응형</code>으로 만들어줍니다. 반응형이라는 시스템은 Vue.js에서 굉장히 중요한 요소입니다. 현재는 해당 속성이 변경되면 내부에서 이를 감지하여 다시 화면에 랜더링 해준다는 정도만 기억 해둡시다. 콘솔창을 열어서 <code>app.text = &#39;some text&#39;;</code>라고 입력해 봅시다. 어떤 의미인지 이해 되실거라고 생각됩니다. 자세한 내용은 뒤에서 따로 정리를 해보도록 할 예정입니다.</p>
</li>
<li><p>methods: 메서드들을 정의하는 객체 입니다. 인스턴스를 통해 직접 접근하거나( 콘솔에서 app.changeText(); ) 혹은 <code>v-on</code>이라는 디렉티브를 이용하여 사용할 수 있습니다.</p>
</li>
<li><p>computed: computed의 속성들은 <code>data의 속성들에 의존</code>합니다. data의 속성이 바뀔 때 마다 이를 의존하고 있는 속성은 계속 업데이트 될 것 입니다. 버튼을 클릭하여 text 라는 데이터를 변경하면 이를 의존하고 있는 otherText도 같이 변경되는 것을 볼 수 있습니다.</p>
</li>
<li><p>components: 해당 인스턴스에서 사용할 수 있는 <strong>컴포넌트를 정의</strong> 합니다. <code>el속성의 영역에서만 사용 가능</code>합니다. (Vue.component()를 사용하여 전역으로도 컴포넌트 생성이 가능합니다.)</p>
</li>
</ul>
<p>자주 사용되는 옵션들 중 몇가지를 살펴 보았습니다. 설명을 진행하다보니 <strong>뒤에서 라는 말 혹은 예제에 언급되지 않은 문법</strong> 등이 설명 중간중간에 섞여 있습니다. 현재 모든 것을 다 설명하기에는 너무나도 큰 영역이기 때문에 현재는 이 정도의 이해만을 목표로 해도 괜찮습니다. Vue.js가 어떤 흐름으로 동작하는지, 어떠한 특성을 가지고 있는지 단편적으로 살펴 보기에는 충분할 것이라 생각 합니다. 다음에는 Vue 인스턴스의 라이프사이클에 대해서 잠깐 알아보도록 하겠습니다.</p>
<!-- 다음에는 디렉티브(지시자)라는 것에 대해서 알아보려고 합니다. 이번 예제에서는 이벤트에 관련된 디렉티브가 등장했었는데요. 이를 보면 디렉티브란 것이 DOM 요소와 관련된 문법 이라는 것을 추측할 수 있습니다. -->
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;h2 id=&quot;뷰-모델-생성&quot;&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
      <category term="data bind" scheme="http://hyc7575.github.io/tags/data-bind/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js - 시작하기</title>
    <link href="http://hyc7575.github.io/2017/06/08/2017-06-08-vueJs-start/"/>
    <id>http://hyc7575.github.io/2017/06/08/2017-06-08-vueJs-start/</id>
    <published>2017-06-08T12:29:57.000Z</published>
    <updated>2017-06-15T01:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko"/><h2 id="시작하기-앞서"><a href="#시작하기-앞서" class="headerlink" title="시작하기 앞서"></a>시작하기 앞서</h2><p>지난 주말 여기 저기서 들려오고 있으며 엄청난 성장세를 보여주고 있는 Vue.js의 공식 문서를 한번 읽어 보았습니다. 한글화가 굉장히 잘 되어있어서 금방금방 슝슝 스크롤을 내리면서 읽을 수 있더군요.(커뮤니티분들께 감사) 처음 문법을 보면서 느낀점은 마치 angular1 과 react를 합친 듯 한 기분이 들었습니다. 또 ‘러닝커브가 낮고 굉장히 효율적이다.’ 라는 소리가 괜히 나오는게 아닌것 같았습니다. 문서를 한번 읽어보니 어떤 흐름으로 흘러가는지 대충 파악이 가능했습니다. 사용 방법도 매우 간단하여 jquery처럼 문서에 스크립트 한줄 추가(이 방법이 best practice 라는건 아닙니다!)하거나 vue-cli와 같은 제너레이터를 이용하여 쉽게 webpack 혹은 browserify와 함께 사용할 수 있습니다. 진행하는 프로젝트 중 spring 위에서 프레임워크 없이 jquery를 기반으로 사용하는 것이 있는데 Vue.js라면 쉽게 특정 부분에서 사용할 수 있겠다 싶어서 바로 적용해 보았습니다. 결과부터 말하자면 아직 진행중이지만 꽤 괜찮은 것(기존 코드가 너무…) 같더군요. 물론 아직 지식이 부족해서 많은 삽질이 있었지만 나름 만족스럽게 진행되어 가고 있는 듯 합니다. 이 작업을 계기로 장기적으로 프로젝트에 조금씩 도입해가며 기초부터 한번 포스팅을 해보고자 해서 쓰게 되었습니다.</p>
<h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>Vue.js는 이름에서 예상할 수 있듯 view작업에 초점을 맞춘 프레임워크입니다. 그래서인지 React와 많은 공통점을 가지고 있으며, 디렉티브(지시자)라는 문법이 등장하는데 이는 angular1에서 영감을 받아 상당 부분 개선되었다고 합니다. <a href="https://kr.vuejs.org/v2/guide/comparison.html" target="_blank" rel="external">이곳</a>에서 다른 프레임워크와 Vue.js가 어떻게 다른지 어떠한 부분이 효율적인지에 대해서 자세히 설명되어 있으니 관심이 있으신 분들은 한번 읽어보시길 바랍니다.</p>
<h2 id="호환"><a href="#호환" class="headerlink" title="호환"></a>호환</h2><p>공식적으로 es5를 지원하는 브라우저에서 사용가능하다고 합니다. es6 문법을 사용한다면 babel 컴파일을 거쳐야합니다.</p>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><ul>
<li>npm</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i vue</div></pre></td></tr></table></figure>
<ul>
<li>cdn</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>프로젝트에 위 스크립트 한줄을 추가 함으로써 Vue.js를 사용할 수 있습니다. (.Vue 확장자를 쓰면 모듈식으로 사용도 가능하지만 예제는 이런 방식으로 하지 않겠습니다.)<br>ps - <code>create-react-app</code>과 같은 <code>vue-cli</code>라는 어플리케이션을 구성해주는 도구도 있습니다. 위에서 언급 하였듯, webpack or browserify의 설정까지 해주어서 편리합니다.</p>
<h2 id="간단한-어플리케이션"><a href="#간단한-어플리케이션" class="headerlink" title="간단한 어플리케이션"></a>간단한 어플리케이션</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">            &#123;&#123;text&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">                <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">                <span class="attr">data</span>: &#123;</div><div class="line">                    <span class="attr">text</span>: <span class="string">'test 입니다.'</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">// 콘솔에서 한번...</span></div><div class="line">            <span class="comment">// app.text = '바뀌어라!!';</span></div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p></p><p data-height="300" data-theme-id="11131" data-slug-hash="OgMRyZ" data-default-tab="js,result" data-user="small" data-embed-version="2" data-pen-title="OgMRyZ" class="codepen">See the Pen <a href="https://codepen.io/small/pen/OgMRyZ/" target="_blank" rel="external">OgMRyZ</a> by keun hyeok (<a href="https://codepen.io/small" target="_blank" rel="external">@small</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>Vue.js는 MVVM 패턴에 영감을 받았다고 합니다. 위 예제에서의 Vue 생성자는 MVVM(Model-View-ViewModel)중 <code>VM(ViewModel)을 생성</code>합니다. 이때 인자로 들어가는 객체를 통하여 여러 옵션을 지정해 줄 수 있습니다. 현재 예제에서는 정의한 data가 템플릿에서 <code>{{property}}</code> 와 같은 형태로 바인딩 된다는 것 입니다. 다른 옵션들에 대해서는 차차 알아가 보도록 하겠습니다.</p>
<h2 id="맺음"><a href="#맺음" class="headerlink" title="맺음"></a>맺음</h2><p>아직 저도 공부를 하는 입장인지라(만만히 보고 도입했다가 삽질 또 삽질…) 공식 문서를 기반으로 한 예제 및 느낀 점을 기록하는 용도로서의 포스팅이 될 것 같습니다.</p>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://kr.vuejs.org/" target="_blank" rel="external">Vue.js 한글 문서</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/480px-Vue.js_Logo.svg.png?uselang=ko&quot;/&gt;&lt;h2 id=&quot;시작하기-앞서&quot;&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/categories/Javascript/vue/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://hyc7575.github.io/tags/vue/"/>
    
      <category term="vue js" scheme="http://hyc7575.github.io/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - express-session with 로그인(3/3)</title>
    <link href="http://hyc7575.github.io/2017/06/03/2017-06-03-NodeJs-session-with-login3/"/>
    <id>http://hyc7575.github.io/2017/06/03/2017-06-03-NodeJs-session-with-login3/</id>
    <published>2017-06-03T12:18:39.000Z</published>
    <updated>2017-06-03T15:56:02.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>패스워드와 같은 중요한 정보는 누군가에게 알려져서는 안되는 정보입니다. 만약 이 정보가 털리더라도 복호화를 할 수 없는 단방향 암호화를 사용하는것이 일반적이라고 할 수 있습니다. 그래서 2장까지 진행하였던 로그인 예제의 패스워드를 암호화 하여 저장하는 방법을 알아보려고 합니다. 사용되고 있는 여러 암호화 알고리즘이 있지만 저는 <a href="https://en.wikipedia.org/wiki/Bcrypt" target="_blank" rel="external">bcrypt</a>를 사용하도록 하겠습니다. <a href="https://en.wikipedia.org/wiki/PBKDF2" target="_blank" rel="external">pbkdf2</a>와 더불어 많이 쓰이는 방법 중 하나입니다.</p>
<p>가입을 진행할때 여태까지는 사용자가 입력한 값을 그대로 저장하였지만 암호화를 진행하고 생성된 Digest(암호화된 값)을 저장하면 됩니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">app.post(<span class="string">'/join'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> body = req.body;</div><div class="line">    <span class="keyword">if</span>( !findUser(body.user_id, body.user_pwd) ) &#123;</div><div class="line">    	<span class="comment">// 아이디도 중복안되게 분기 해야는데 예제이므로..</span></div><div class="line">        <span class="keyword">const</span> salt = bcrypt.genSaltSync(<span class="number">10</span>); <span class="comment">// salt값 생성, 10이 default</span></div><div class="line">        <span class="keyword">const</span> hash = bcrypt.hashSync(body.user_pwd, salt); <span class="comment">// Digest</span></div><div class="line">        users.push(&#123;</div><div class="line">            <span class="attr">user_id</span>: body.user_id,</div><div class="line">            <span class="attr">user_pwd</span>: hash,</div><div class="line">            <span class="attr">user_nickname</span>: body.user_nickname</div><div class="line">        &#125;);</div><div class="line">    	res.redirect(<span class="string">'/login'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	res.send(<span class="string">'이미 존재함'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>5, 6번 라인이 암호화를 진행하는 작업이다. salt라는 것 은 비밀번호를 암호화 하기 전에 랜덤한 값을 더하여 결과 값을 무작위로 만들어줍니다. 동일한 패스워드를 입력하더라도 생성된 값은 항상 다르게 되는것 이지요. 인자로 숫자가 들어가있는데 2^n만큼 해싱작업을 진행합니다.(자세한 내용은 범위가 작지 않은것 같으므로 생략하겠습니다.) 이제 생성된 값을 users에 저장합니다. 이제 비밀번호는 더 이상 우리가 입력한 값을 그대로 비교하는 것으로는 인증이 되지 않습니다. find하는 과정을 수정해야 합니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> findUser = <span class="function">(<span class="params">user_id, user_pwd</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// id와 password가 일치하는 유저 찾는 함수, 없으면 undefined 반환</span></div><div class="line">    <span class="keyword">return</span> users.find( <span class="function"><span class="params">v</span> =&gt;</span> (v.user_id === user_id &amp;&amp;  bcrypt.compareSync(user_pwd, v.user_pwd) ) );</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> findUserIndex = <span class="function">(<span class="params">user_id, user_pwd</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 일치하는 유저의 index값(유니크) 반환</span></div><div class="line">    <span class="keyword">return</span> users.findIndex( <span class="function"><span class="params">v</span> =&gt;</span> (v.user_id === user_id &amp;&amp; bcrypt.compareSync(user_pwd, v.user_pwd)) );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>사용자가 입력한 비밀번호를 <code>compareSync</code>를 사용하여 저장되어있는 비밀번호와 비교합니다. 일치하면 true를 반환해줄 것 입니다. 이제 암호화와 관련된 모든 작업을 마쳤습니다.</p>
<h2 id="맺음"><a href="#맺음" class="headerlink" title="맺음"></a>맺음</h2><p>저도 처음 공부해본 내용이라 혹 개념적으로 틀린 내용이 있다면 알려주시면 감사합니다 ㅠ</p>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul>
<li><a href="https://www.npmjs.com/package/bcrypt-nodejs" target="_blank" rel="external">bcrypt</a></li>
<li><a href="https://stackoverflow.com/questions/6832445/how-can-bcrypt-have-built-in-salts" target="_blank" rel="external">bcrypt동작</a> (db에 salt를 저장하지 않아서 어떻게 가지고 있나 찾아보다가 발견한 글 입니다)</li>
<li><a href="http://minix.tistory.com/406" target="_blank" rel="external">한국식 보안 상황에서 살아남는 법</a> (우연히 발견한 글인데 재미있게 봐서 공유합니다 보안쪽은 잘 모르는데 재미있게 잘 보았네요.)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;패스워드와 같은 중요한 정보는 누군가에게 
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="express-session" scheme="http://hyc7575.github.io/tags/express-session/"/>
    
      <category term="nodejs login" scheme="http://hyc7575.github.io/tags/nodejs-login/"/>
    
      <category term="bcrypt" scheme="http://hyc7575.github.io/tags/bcrypt/"/>
    
      <category term="암호화" scheme="http://hyc7575.github.io/tags/%EC%95%94%ED%98%B8%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - express-session with 로그인(2/3)</title>
    <link href="http://hyc7575.github.io/2017/06/02/2017-06-02-Nodejs-session-with-login2/"/>
    <id>http://hyc7575.github.io/2017/06/02/2017-06-02-Nodejs-session-with-login2/</id>
    <published>2017-06-02T12:42:15.000Z</published>
    <updated>2017-06-02T13:56:25.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>2장에서는 로그인 및 가입에 관한 로직을 작성하겠습니다. 우선 로그인 form이 있는 login.ejs 파일을 만들겠습니다.</p>
<ul>
<li>login.ejs</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        아이디 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_id"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        비밀번호 :<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"user_pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>/login</code> 엔드포인트로 post요청을 보내는 form입니다. 여기서 입력한 아이디와 패스워드로 가입되어있는 회원이라면 정상적으로 로그인 처리와 세션을 등록해주는 기능을 할 것 입니다.</p>
<ul>
<li>app.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'login'</span>); <span class="comment">// login.ejs 랜더링</span></div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> body = req.body; <span class="comment">// body-parser 사용</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>( findUser( body.user_id, body.user_pwd ) ) &#123;</div><div class="line">    <span class="comment">// 해당유저가 존재한다면</span></div><div class="line">        req.session.user_uid = findUserIndex( body.user_id, body.user_pwd ); <span class="comment">//유니크한 값 유저 색인 값 저장</span></div><div class="line">        res.redirect(<span class="string">'/'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.send(<span class="string">'유효하지 않습니다.'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>매우 직관적인 코드여서 이해하기 어렵지 않을 것 입니다.(아마도..?)<br>해당 유저가 존재한다면 해당 유저의 유니크한 값(여기서는 인덱스)을 세션의 <code>user_uid</code>에 저장합니다. 로그인을 하였으면 로그아웃에 관한 기능이 필요한 것은 당연합니다.</p>
<ul>
<li>app.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/logout'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">delete</span> req.session.user_uid;</div><div class="line">    res.redirect(<span class="string">'/'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>로그아웃 또한 매우 간단합니다. 세션에 저장되어있는 <code>user_uid</code> 프로퍼티를 삭제해주기만 하면 됩니다. 이제 로그인 로그아웃이 구현되었습니다. 이쯤에서 app.js를 실행 하고 테스트를 한번 해보도록 합시다.</p>
<p><img src="https://cloud.githubusercontent.com/assets/14171723/26726812/771361b8-47df-11e7-9811-241577044c12.png" alt="after login"></p>
<p>users 배열에 hyeok이라는 user_id를 가진 정보로 로그인을 해보았습니다. 정상적으로 닉네임이 표시되는 것을 확인할 수 있습니다. 만료기간을 따로 지정하지 않았기때문에 브라우저를 완전히 종료하지 않는 이상 이 세션은 그대로 유지될 것 입니다. 다음은 회원을 추가(가입)하는 기능을 해보겠습니다. 예상하셨겠지만 그냥 users 배열에 새로운 유저정보 객체를 push해주면 됩니다.</p>
<ul>
<li>join.ejs</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/join"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        아이디 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_id"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        비밀번호 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"user_pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        닉네임 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_nickname"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>app.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/join'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'join'</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/join'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> body = req.body;</div><div class="line">    <span class="keyword">if</span>( !findUser(body.user_id, body.user_pwd) ) &#123;</div><div class="line">        <span class="comment">// 아이디도 중복안되게 분기 해야는데 예제이므로..</span></div><div class="line">        users.push(&#123;</div><div class="line">            <span class="attr">user_id</span>: body.user_id,</div><div class="line">            <span class="attr">user_pwd</span>: body.user_pwd,</div><div class="line">            <span class="attr">user_nickname</span>: body.user_nickname</div><div class="line">        &#125;);</div><div class="line">        res.redirect(<span class="string">'/login'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.send(<span class="string">'이미 존재함'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>findUser를 통해 유저가 없다고 판단되면 users배열에 새로운 객체를 추가해줍니다. 이제 가입부터 로그인, 로그아웃 모든 기능이 구현되었습니다. 3장에서는 비밀번호를 암호화 하여 저장하는 방법을 알아보겠습니다. 사용할 암호화 방식은 <code>bcrypt</code> 알고리즘입니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;2장에서는 로그인 및 가입에 관한 로직을 
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="express-session" scheme="http://hyc7575.github.io/tags/express-session/"/>
    
      <category term="nodejs login" scheme="http://hyc7575.github.io/tags/nodejs-login/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - express-session with 로그인(1/3)</title>
    <link href="http://hyc7575.github.io/2017/06/02/2017-06-02-Nodejs-session-with-login/"/>
    <id>http://hyc7575.github.io/2017/06/02/2017-06-02-Nodejs-session-with-login/</id>
    <published>2017-06-02T04:45:56.000Z</published>
    <updated>2017-06-03T12:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>세션은 쿠키와 마찬가지로 웹 사이트로 부터 저장되는 데이터이며 조금 더 발전(?)한 기능입니다. 세션은 쿠키와는 다르게 사용자의 컴퓨터가 아닌 서버에 저장이 되며, 저장된 데이터는 세션을 생성하면서 사용자의 쿠키에 저장된 식별자 정보를 통해 접근할 수 있습니다. 누군가에게 알려져서는 안될 정보들은 보다 안전한 세션에 저장해두어야 합니다. <code>express-session</code>이라는 모듈을 사용하여 사용자의 로그인 인증정보를 세션에 저장하는 방법을 알아보겠습니다.</p>
<h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><ul>
<li>project<ul>
<li>views<ul>
<li>index.ejs</li>
<li>join.ejs</li>
<li>login.ejs</li>
</ul>
</li>
<li>app.js</li>
</ul>
</li>
</ul>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">npm i --save express ejs express-session body-parser bcrypt-nodejs</div></pre></td></tr></table></figure>
<p>회원을 추가하는 부분도 포함되었기 때문에 body-parser도 사용하였고, bcrypt-nodejs는 3장에서 살펴볼 암호화와 관련된 모듈입니다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h3 id="세션-미들웨어-등록"><a href="#세션-미들웨어-등록" class="headerlink" title="세션 미들웨어 등록"></a>세션 미들웨어 등록</h3><ul>
<li>app.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</div><div class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt-nodejs'</span>); <span class="comment">// 3장에서 사용할 암호화 모듈</span></div><div class="line">　</div><div class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line">　</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</div><div class="line">app.use(session(&#123;</div><div class="line">    <span class="attr">secret</span>: <span class="string">'ambc@!vsmkv#!&amp;*!#EDNAnsv#!$()_*#@'</span>,</div><div class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span></div><div class="line">&#125;));</div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>우선 세션 미들웨어 등록하는 방법부터 알아보겠습니다. 10번 라인을 보시면 express-session모듈에서 가져온 미들웨어를 등록하는 부분이 있습니다. 이 부분을 등록하면 요청시 마다 req.session으로 세션 객체에 접근할 수 있게 됩니다. 옵션으로 들어간 값을 한번 살펴보겠습니다.</p>
<ul>
<li><p>secret: secret은 필수로 들어가야하는 옵션입니다. 세션은 기본적으로 식별자를 쿠키에 저장하게 되는데 그 저장되는 데이터를 <strong>암호화</strong> 하기위해 필요한 옵션입니다.</p>
</li>
<li><p>resave: 요청이 왔을때 세션을 수정하지 않더라도 세션을 다시 저장소에 다시 저장되도록 합니다. 2개 이상의 병렬요청이 왔을 경우 원치 않은 저장이 이루어질 수 있으니 유의 해야합니다. (false 권장)</p>
</li>
<li><p>saveUninitialized: 초기화 되지 않은 세션을 강제로 저장합니다. 이는 모든 방문자들에게 고유한 식별 값을 주는 것과 같습니다.</p>
</li>
</ul>
<!-- (resave와 saveUninitialized의 **관계**가 조금 헷갈려서 자료를 찾아보았지만 명쾌한 자료를 찾을 수가 없었습니다. 그나마 괜찮은 자료는 [이것][link1] 입니다.) -->
<p>이제 라우팅 처리를 하기 전 회원과 관련된 몇몇 기능을 미리 만들어 두겠습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js 내부에 선언합니다.</span></div><div class="line"><span class="keyword">const</span> users = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">user_id</span>: <span class="string">'hyeok'</span>,</div><div class="line">        <span class="attr">user_nickname</span>: <span class="string">'혁'</span>,</div><div class="line">        <span class="attr">user_pwd</span>: <span class="string">'123456'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">user_id</span>: <span class="string">'hyc7575'</span>,</div><div class="line">        <span class="attr">user_nickname</span>: <span class="string">'에이치'</span>,</div><div class="line">        <span class="attr">user_pwd</span>: <span class="string">'1q2w3e4r'</span></div><div class="line">    &#125;</div><div class="line">]</div><div class="line"><span class="keyword">const</span> findUser = <span class="function">(<span class="params">user_id, user_pwd</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// id와 password가 일치하는 유저 찾는 함수, 없으면 undefined 반환</span></div><div class="line">    <span class="keyword">return</span> users.find( <span class="function"><span class="params">v</span> =&gt;</span> (v.user_id === user_id &amp;&amp; v.user_pwd === user_pwd) );</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> findUserIndex = <span class="function">(<span class="params">user_id, user_pwd</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 일치하는 유저의 index값(유니크) 반환</span></div><div class="line">    <span class="keyword">return</span> users.findIndex( <span class="function"><span class="params">v</span> =&gt;</span> (v.user_id === user_id &amp;&amp; v.user_pwd === user_pwd) );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>users라는 회원 로그인 정보와 해당 유저를 찾는함수 그리고 해당 유저의 인덱스값(유니크한 값으로써 사용)을 구하는 함수를 생성하였습니다. 기본적으로 필요로한 기능들은 만들어졌으니 라우팅 작업을 시작합니다.</p>
<ul>
<li>app.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 미들웨어 아래쪽으로 배치해주세요.</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> sess = req.session; <span class="comment">// 세션 객체에 접근</span></div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">nickname</span>: sess.user_uid+<span class="number">1</span> ? users[sess.user_uid][<span class="string">'user_nickname'</span>] : <span class="string">''</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>index.ejs</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>( !<span class="attr">nickname</span> ) &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>로그인을 해주세요.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span>로그인<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/join"</span>&gt;</span>회원가입<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>안녕하세요. <span class="tag">&lt;<span class="name">%=</span> <span class="attr">nickname</span> %&gt;</span>님<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span>로그아웃<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>이제 session을 사용하기위한 모든 준비가 끝났습니다. 미들웨어의 옵션으로 <code>saveUninitialized</code>값을 true로 설정해주었기 때문에 app.js를 실행하고 접속하면 아직 세션에 아무런 값도 설정해주지는 않았지만 쿠키에 고유한 식별값을 남겨두었을 것 입니다.<br><img src="https://cloud.githubusercontent.com/assets/14171723/26714475/7a8b74da-47ac-11e7-8a64-522a0f5df510.png" alt="connect.sid"><br>기본적으로 connect.sid라는 이름으로 저장됩니다. 이 쿠키값을 통해서 메모리에 저장되어있는 세션정보를 읽을 수 있는 것 입니다. 로그인 및 가입 구현은 2장에서 진행하겠습니다.</p>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://github.com/expressjs/session" target="_blank" rel="external">express-session</a>에서 세션 설정에 관한 많은 옵션들을 살펴보실 수 있습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;세션은 쿠키와 마찬가지로 웹 사이트로 부터
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="express-session" scheme="http://hyc7575.github.io/tags/express-session/"/>
    
      <category term="nodejs login" scheme="http://hyc7575.github.io/tags/nodejs-login/"/>
    
  </entry>
  
  <entry>
    <title>Javascript(잡담) - new Array(n)의 undefined</title>
    <link href="http://hyc7575.github.io/2017/05/31/2017-05-31-javascript-newArray/"/>
    <id>http://hyc7575.github.io/2017/05/31/2017-05-31-javascript-newArray/</id>
    <published>2017-05-31T07:33:44.000Z</published>
    <updated>2017-06-08T12:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/26621663/7479b128-4622-11e7-9a27-96aa8bb863a6.png"/><p>작업중인 라이브러리의 메서드 중 인자로 들어오는 array들의 중복값을 리턴해주는 것이 있습니다. 이를 튜닝하면서 생긴 뻘짓을 쓰는 글 입니다. 성능 테스트를 하기 위해서 <code>new Array(10000000);</code> 형태로 배열을 만들어서 테스트 하였습니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000000</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000000</span>);</div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100000000</span>);</div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10000000</span>);</div><div class="line">method(a,b,c,d); <span class="comment">// [];</span></div></pre></td></tr></table></figure>
<p>성능 자체는 만족스럽게 올라갔지만 예상했던 <code>[undefined]</code>가 출력되지 않음.. Array 생성자에 인자로 정수를 넣어주면 해당 길이만큼의 undefined를 가진 배열을 반환해주는 것으로 알고 있던 나는 indexOf 메서드를 사용해보았습니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">a.indexOf(<span class="literal">undefined</span>); <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<p>이상하다 생각되어서 되지도 않는 영어를 조합하며 구글링을 시작했지만 원하는 글은 찾아볼 수 없었고 심지어 indexOf를 사용하여 undefined를 검색하던 어떤 예제는 index값을 잘 반환하는 상황… 그 예제와 배열 생성하는 방법을 비교해보니<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="string">'test'</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]; <span class="comment">// 해당 예제</span></div><div class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">arr1.indexOf(<span class="literal">undefined</span>); <span class="comment">// 1</span></div><div class="line">arr2.indexOf(<span class="literal">undefined</span>); <span class="comment">// -1</span></div></pre></td></tr></table></figure></p>
<p>이 사실을 통해 예측할 수 있는 사실은 <code>new Array(n)</code>은 값이 할당되지 않고 length 속성만 지정해주지 않을까 라는 점이다. 콘솔에서 배열 내부를 열어보았다.<br><img src="https://cloud.githubusercontent.com/assets/14171723/26661897/6ec79062-46bb-11e7-8552-89dfed6067ac.png" alt="console array"></p>
<p>예상했던대로 값이 없고 length만 지정된 배열이 들어오게 되었습니다.( 저 undefined x 10 이라는 것 때문에 여태 undefined가 할당된줄 알았습니다 ㅠ ) 저 <code>a</code>라는 배열에 요소를 추가해보겠습니다.<br><img src="https://cloud.githubusercontent.com/assets/14171723/26662468/fcaaffc4-46be-11e7-93d7-112745424bbc.png" alt="add element"><br>0~9까지의 값이 <strong>할당되지 않았고</strong> 10번 인덱스부터 값이 할당 되었네요. javascript의 배열이 실상은 Array.prototype 을 상속받은 <code>객체</code>여서 그런게 아닐까 생각되네요.(근거 있는 답이 아니라 제 추측입니다.) 본론으로 돌아와서 값이 할당되지 않은 배열을 반환하기에 이 <code>a</code>라는 배열은 map이나 filter와 같은 메서드들은 제대로 동작을 하지 않게 될 것입니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">a.map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(v, i);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>10번의 콘솔과 0이 10개가 담긴 배열을 반환해줘야할 것 처럼 보이지만 값이 할당되지 않은 배열이므로 예상했던 동작은 하지 않습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">a.push(<span class="string">'ha'</span>);</div><div class="line">a.map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(v, i);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ha 10</span></div><div class="line"><span class="comment">// [ 빈값 10개 , 0]</span></div></pre></td></tr></table></figure></p>
<p>이렇게 값을 명시적으로 할당해주어야 ha라는 값과 10 이라는 인덱스를 보여주고, 10번 인덱스에 0이라는 값 가진 배열을 출력해주네요. <strong>결론은 할당 되지 않았기 떄문에 성능테스트를 할 때 비어있는 배열을 반환해준 것 이였습니다!</strong> 의식의 흐름에 맡겨 막 쓴 글이여서 두서없고 막 삼천포로 빠지고 그랬던거 같아요…</p>
<p>　<br>　<br>ps - 불여우 콘솔에서는…<br><img src="https://cloud.githubusercontent.com/assets/14171723/26663318/e5f313a6-46c4-11e7-95a9-02d1fbd5fb09.png" alt="firefox console"></p>
<p>이럴수가 ㅠ</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/26621663/7479b128-4622-11e7-9a27-96aa8bb863a6.png&quot;/&gt;&lt;p&gt;작업중인 라이브러리의 메서드 중 인자로 들
    
    </summary>
    
      <category term="Javascript" scheme="http://hyc7575.github.io/categories/Javascript/"/>
    
      <category term="잡담" scheme="http://hyc7575.github.io/categories/Javascript/%EC%9E%A1%EB%8B%B4/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="array" scheme="http://hyc7575.github.io/tags/array/"/>
    
      <category term="javascript array" scheme="http://hyc7575.github.io/tags/javascript-array/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - cookie-parser</title>
    <link href="http://hyc7575.github.io/2017/05/30/2017-05-30-nodejs-cookie/"/>
    <id>http://hyc7575.github.io/2017/05/30/2017-05-30-nodejs-cookie/</id>
    <published>2017-05-30T05:14:29.000Z</published>
    <updated>2017-06-03T15:51:48.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>쿠키란 사용자의 컴퓨터에 웹 사이트로부터 저장된 작은 데이터 조각입니다. 이 데이터를 통하여 사용자의 정보 저장, 사이트 내의 움직임 추적, 중단 시점 체크 등 다양한 기능을 제공할 수 있습니다. 쿠키는 일반적으로 브라우저 하위의 폴더로 저장되게 됩니다. 지금 제가 사용하는 맥의 크롬을 기준으로는 <code>/Users/{username}/Library/Application Support/Google/Chrome/Default</code> 폴더의 Cookies라는 파일이 아닐까 합니다. (파일 내부 내용을 봐서는 맞는 것 같은데 정보의 팩트를 체크할 수 가 없네요 ㅠ) 이 파일의 내부를 살펴보면 각 쿠키당 서버의 정보가 있는걸 봐서는 특정 서버에서 만들어진 쿠키는 그 서버에 종속된다고 생각할 수 있겠습니다. 본격적으로 Node.js에서 쿠키를 사용하는 방법을 알아보겠습니다.</p>
<h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><ul>
<li>project<ul>
<li>app.js</li>
<li>package.json</li>
</ul>
</li>
</ul>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">npm i --save express cookie-parser</div></pre></td></tr></table></figure>
<p>cookie-parser와 express를 설치합니다. <code>parser</code>라는 이름에서 예상하셨을 수 있겠지만 기존에 배웠던 body-parser와 사용법이 거의 비슷합니다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><ul>
<li>app.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</div><div class="line">　</div><div class="line">app.use(cookieParser());</div><div class="line">　</div><div class="line">app.get(<span class="string">'/toggleChk'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.cookie(<span class="string">'checked'</span>, req.cookies.checked ? <span class="string">''</span> : <span class="string">'checked'</span>); <span class="comment">// set cookie</span></div><div class="line">    res.redirect(<span class="string">'/'</span>);</div><div class="line">&#125;);</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.send(<span class="string">`</span></div><div class="line">        &lt;input type="checkbox" <span class="subst">$&#123;req.cookies.checked&#125;</span>&gt;</div><div class="line">        &lt;a href="/toggleChk"&gt;쿠키 토글&lt;/a&gt;</div><div class="line">    `);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>cookie-parser 불러와서 미들웨어로 사용하겠다고 선언만 해주시면 <code>req.cookies</code>로 접근이 가능해집니다. 이제 app.js를 실행하고 <code>localhost:3000</code>에 접속하면 체크박스와 버튼(링크)하나가 보입니다. 이 체크박스는 checked라는 이름의 쿠키 값에 따라 체크가 되어있을수도 아닐수도 있습니다. 처음 실행하였다면 몇번을 새로고침 하여도 체크가 되어있지 않을 것 입니다. 이제 쿠키 토글버튼을 클릭해봅시다. 체크가 되어있는 것을 볼 수 있습니다. 이 버튼(링크)은 checked라는 쿠키를 설정하고 루트경로로 이동시켜주는 요청메서드 였습니다. 이제는 몇번을 새로고침하여도 체크박스에는 체크가 되어있을 것 입니다.</p>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://github.com/expressjs/cookie-parser" target="_blank" rel="external">cookie-parser</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;쿠키란 사용자의 컴퓨터에 웹 사이트로부터 
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="cookie-parser" scheme="http://hyc7575.github.io/tags/cookie-parser/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - body-parser와 multer</title>
    <link href="http://hyc7575.github.io/2017/05/24/2017-05-24-node-js-bodyparserAndMulter/"/>
    <id>http://hyc7575.github.io/2017/05/24/2017-05-24-node-js-bodyparserAndMulter/</id>
    <published>2017-05-24T05:31:33.000Z</published>
    <updated>2017-05-30T05:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><p>Node.js에서 form양식을 submit을 하기위해 사용되는 <a href="https://github.com/expressjs/body-parser" target="_blank" rel="external">body-parser</a>와 <a href="https://github.com/expressjs/multer" target="_blank" rel="external">multer</a> 미들웨어에 대해서 간단하게 알아보려 합니다. 각 미들웨어의 용도를 짧게 소개하면 <code>body-parser</code>는 <a href="https://hyc7575.github.io/2017/05/16/2017-05-16-nodejs-express-router-middleware/">라우터와 미들웨어</a> 예제때 언급하였듯 요청 바디를 파싱하여서 req.body 객체로 접근할 수 있도록 도와주고, <code>multer</code>는 파일을 업로드를 도와주는 미들웨어 입니다.</p>
<h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><ul>
<li>project<ul>
<li>uploads</li>
<li>views<ul>
<li>form.ejs</li>
</ul>
</li>
<li>app.js</li>
<li>package.json</li>
</ul>
</li>
</ul>
<p>uploads폴더는 업로드한 파일들이 들어가는 폴더입니다.</p>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">npm i --save body-parser multer express ejs</div></pre></td></tr></table></figure>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><p>body-parser부터 차근차근 진행하도록 하겠습니다.</p>
<ul>
<li>form.ejs<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        *&#123;margin:0; padding: 0;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/userForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>이름<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userAge"</span>&gt;</span>나이<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"userAge"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userAge"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userJob"</span>&gt;</span>직업<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"userJob"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userJob"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"전송"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>/userForm</code> 포인트로 post요청을 보내는 form을 생성합니다.</p>
<ul>
<li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line">　</div><div class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line">　</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</div><div class="line">app.use(bodyParser.json()); <span class="comment">// 이번예제에서는 사용되지 않습니다...</span></div><div class="line">　</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'form'</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/userForm'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(req.body);</div><div class="line">    res.json(req.body);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>/userForm</code>으로 post요청이 들어오게되면 req.body객체를 웹페이지에 json형태로 뿌려주도록 하였습니다. 이 상태로 어플리케이션을 실행하여 테스트 해봅니다.</p>
<p><code>{&quot;userName&quot;: &quot;hyeok&quot;, &quot;userAge&quot;: &quot;20&quot;, &quot;userJob&quot;: &quot;Front-end developer&quot;}</code> 아마 이러한 형태의 결과를 보실 수 있으시라 생각합니다. 이전 포스팅에서 언급하였듯 form submit이 발생시 기본적으로 Content-Type이 x-www-form-urlencoded로 요청이 들어오는데 이 경우 <code>bodyParser.urlencoded()</code>가 input의 name과 매칭된 req.body 객체를 생성해줍니다. 이제 파일 업로드를 추가해보도록 하겠습니다.</p>
<ul>
<li>form.ejs<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/userForm"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userImage"</span>&gt;</span>사진<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"userImage"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"userImage"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>input file이 들어간 로우 하나를 테이블에 추가하고, form태그의 enctype을 multipart/form-data로 명시해줍니다. 인코딩 타입을 이렇게 지정해야지만 form태그로 file전송을 할 수 있습니다.</p>
<ul>
<li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>); <span class="comment">// 이 예제에서는 bodyParser가 필요하지 않지만...</span></div><div class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</div><div class="line"><span class="keyword">const</span> upload = multer(&#123;<span class="attr">dest</span>: <span class="string">'uploads/'</span>&#125;); <span class="comment">// uploads 폴더에 파일을 저장</span></div><div class="line">　</div><div class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line">　</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;)); <span class="comment">// 이번예제에서는 사용되지 않지만...</span></div><div class="line">app.use(bodyParser.json()); <span class="comment">// 이번예제에서는 사용되지 않지만...</span></div><div class="line">　</div><div class="line">app.use(express.static(<span class="string">'uploads'</span>)); <span class="comment">// 업로드된 이미지를 요청하여 표시한다면 넣어줍시다.</span></div><div class="line">　</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'form'</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/userForm'</span>, upload.single(<span class="string">'userImage'</span>), (req, res) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(req.body);</div><div class="line">    <span class="built_in">console</span>.log(req.file);</div><div class="line">    res.send(<span class="string">`</span></div><div class="line">        body: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(req.body)&#125;</span>,&lt;br/&gt;</div><div class="line">        file: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(req.file)&#125;</span></div><div class="line">    `);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>multer({dest: &#39;uploads/&#39;});</code> 이 함수는 미들웨어를 리턴하며, 옵션으로 들어간 dest의 value인 uploads에(폴더) 파일을 저장하겠다고 설정한 것 입니다. 그리고 리턴된 이 미들웨어는 <code>/userForm</code>에 post요청이 왔을 때 인자로 전해지는 <code>upload.single(&#39;userImage&#39;)</code> 미들웨어( 인자는 input file의 name값 )로 사용됩니다. 이 단계에서 req.body와 req.file에 접근 가능하도록 도와줍니다.( Content-Type이 multipart/form-data여서 body-parser가 해주지 않아요 ) 이제 어플리케이션을 실행하고 테스트를 진행합니다.</p>
<p>body와 file의 정보가 객체형태로 넘어오고 uploads폴더에 파일이 저장되는것을 볼 수 있지만 이름이 랜덤하고 확장자도 없이 들어오고 있습니다. <code>storage</code>라는 것을 사용하여 파일이 디스크에 저장될때를 컨트롤할 수 있다고 하니 사용해보도록 합시다.</p>
<ul>
<li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</div><div class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</div><div class="line">    <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</div><div class="line">        cb(<span class="literal">null</span>, <span class="string">'uploads/'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</div><div class="line">        cb(<span class="literal">null</span>, <span class="built_in">Date</span>.now() + <span class="string">'_'</span> + file.originalname);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> upload = multer(&#123;<span class="attr">storage</span>: storage&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>큰 변화는 없고 multer의 인자로 dest대신 storage를 설정해줍니다. destination은 파일이 저장될 위치이고, filename은 저장되는 파일의 이름을 설정합니다. 임시방편으로 Date.now()를 사용하였지만 유니크한 값을 만들어주는 모듈들을 설치하여서 사용하는 것을 추천 드립니다. 다시 한번 저장 후 어플리케이션을 실행하면 원본이름을 포함하고 있는 파일이 저장되어 있는 것을 볼 수 있습니다.</p>
<h2 id="맺음"><a href="#맺음" class="headerlink" title="맺음"></a>맺음</h2><p>예제에서는 upload.single()을 사용하여 하나의 파일만을 업로드하는 경우를 살펴보았지만, upload.array()나 upload.fields() 등 을 사용하면 여러 파일을 업로드할 수 있습니다. 자세한 내용은 <a href="https://github.com/expressjs/multer" target="_blank" rel="external">링크</a>에서 확인해 보실 수 있습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;p&gt;Node.js에서 form양식을 submi
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="body-parser" scheme="http://hyc7575.github.io/tags/body-parser/"/>
    
      <category term="bodyParser" scheme="http://hyc7575.github.io/tags/bodyParser/"/>
    
      <category term="multer" scheme="http://hyc7575.github.io/tags/multer/"/>
    
      <category term="form submit" scheme="http://hyc7575.github.io/tags/form-submit/"/>
    
  </entry>
  
  <entry>
    <title>Node.js - mysql 연결</title>
    <link href="http://hyc7575.github.io/2017/05/19/2017-05-19-nodejs-mysql/"/>
    <id>http://hyc7575.github.io/2017/05/19/2017-05-19-nodejs-mysql/</id>
    <published>2017-05-19T08:37:55.000Z</published>
    <updated>2017-05-29T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><h2 id="mysql-연결하기"><a href="#mysql-연결하기" class="headerlink" title="mysql 연결하기"></a>mysql 연결하기</h2><p>데이터베이스에 관한 설명은 최대한 배제하고 node.js에서 mysql을 사용하는 방법 위주로 다루겠습니다. <del>(제가 db를 잘 몰라요 ㅠ..)</del><br>예제를 시작하기 앞서 로컬 또는 개인서버에 mysql 설치 후 예제에서 사용하는 table을 만들어야 합니다. 저는 <a href="https://www.freemysqlhosting.net/" target="_blank" rel="external">https://www.freemysqlhosting.net/</a>에서 테스트용 mysql 서버를 무료로 호스팅 받았습니다.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Projects (</div><div class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</div><div class="line">    description <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</div><div class="line">    author <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</div><div class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;;</div><div class="line">　</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Projects (<span class="keyword">name</span>, description, author) <span class="keyword">VALUES</span> (<span class="string">'node example'</span>,<span class="string">'node js 연습 프로젝트'</span>, <span class="string">'hyeok'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Projects (<span class="keyword">name</span>, description, author) <span class="keyword">VALUES</span> (<span class="string">'javascript example'</span>,<span class="string">'javascript 연습 프로젝트'</span>, <span class="string">'kh_j'</span>);</div></pre></td></tr></table></figure>
<p>DB 서버에 접속하여서 Projects라는 테이블과 2개 정도의 테스트용 데이터를 생성하였습니다.<br>이제 본격적으로 node.js에서 mysql에 접속하는 방법을 살펴보겠습니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">npm i --save express ejs express-ejs-layouts mysql</div></pre></td></tr></table></figure>
<p>예제를 진행하기 위한 폴더에서 package.json 파일을 만들고 몇가지 모듈들을 설치합니다.</p>
<h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><ul>
<li>project<ul>
<li>config<ul>
<li>dbconfig.js</li>
</ul>
</li>
<li>routes<ul>
<li>route.js</li>
</ul>
</li>
<li>views<ul>
<li>index.ejs</li>
</ul>
</li>
<li>app.js</li>
<li>package.json</li>
</ul>
</li>
</ul>
<h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><ul>
<li>dbconfig.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">host</span>     : <span class="string">'&lt;host&gt;'</span>,</div><div class="line">    <span class="attr">user</span>     : <span class="string">'&lt;username&gt;'</span>,</div><div class="line">    <span class="attr">password</span> : <span class="string">'&lt;password&gt;'</span>,</div><div class="line">    <span class="attr">database</span> : <span class="string">'&lt;db_name&gt;'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>데이터베이스 접속 정보를 모듈화 시켜줍니다. 로컬에 mysql을 설치하셨다면 host는 localhost이며 나머지는 mysql을 설치하면서 설정한 값을 넣어주면 됩니다. 제가 사용한 mysql 호스팅은 가입시 메일로 정보를 보내주더군요.</p>
<ul>
<li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> expressLayouts = <span class="built_in">require</span>(<span class="string">'express-ejs-layouts'</span>);</div><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./routes/route.js'</span>);</div><div class="line"></div><div class="line">app.set(<span class="string">'views'</span>,__dirname + <span class="string">'/views'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line">　</div><div class="line">app.use(expressLayouts);</div><div class="line">app.use(router);</div><div class="line">　</div><div class="line">app.listen(<span class="number">4000</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>이전까지 예제와 차이가 없습니다. 간단한 세팅과 서버 실행을 담당합니다.</p>
<ul>
<li>route.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> router = express.Router();</div><div class="line">　</div><div class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</div><div class="line"><span class="keyword">const</span> connection = mysql.createConnection(<span class="built_in">require</span>(<span class="string">'../config/dbconfig.js'</span>));</div><div class="line">　</div><div class="line">connection.connect(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span>(err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'mysql connect completed'</span> );</div><div class="line">&#125;);</div><div class="line">router.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> sql = <span class="string">'SELECT * FROM Projects'</span>;</div><div class="line">    connection.query(sql, (err, results, field) =&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.log(results); <span class="comment">// 배열 형태로 결과가 떨어짐</span></div><div class="line">        res.render(<span class="string">'index'</span>, &#123;</div><div class="line">            <span class="attr">layout</span>: <span class="literal">false</span>, <span class="comment">// express-ejs-layouts는 기본으로 layout.ejs가 설정되어야 하는데 이를 사용하지 않을 경우</span></div><div class="line">            projects: results</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>route.js에서 mysql 모듈을 불러옵니다.<br>mysql 모듈의 <code>mysql.createConnection</code>을 사용하면 db에 접근할 수 있는 객체(?)를 생성할 수 있습니다. 이 메서드는 인자로 dbconfig.js에서 설정한 정보를 가져옵니다. 이제 우리는 connection 객체로 db에 접근할 수 있게 되었습니다. 다음으로 <code>connection.connect()</code>는 db 접속시 발생하는 이벤트입니다. 에러를 인자로 받아 db접속에 실패할 경우 어떠한 에러인지 판별할 수 있고 성공 로그를 남길수도 있습니다. 마지막으로 <code>connection.query()</code>입니다. 이 메서드는 db에 쿼리문을 전달하여 결과 값을 받아오는 기능을 합니다. 우리는 첫번째 인자로 string 형태의 쿼리문을 전달하였고 그에대한 callback의 2번째 인자로 결과를 가져왔습니다. 콘솔에 results의 로그를 남겨보면 맨 처음 추가했던 2개의 데이터가 <code>배열</code> 형태로 넘어오는 것을 볼 수 있습니다.</p>
<ul>
<li>index.ejs<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>프로젝트 리스트<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>author<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">projects.forEach</span>((<span class="attr">item</span>) =&gt;</span> &#123; %&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.id</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.description</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.author</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>route.js에서 <code>res.render</code>부분을 보면 쿼리문에대한 결과를 넘겨주는 것을 볼 수 있습니다. 그로인해 우리는 projects라는 이름의 변수를 사용할 수 있고, 그 변수는 하나의 배열입니다. index.ejs에서는 그 배열을 forEach 돌면서 뿌려주는 역할을 합니다.</p>
<p>이제 app.js를 실행하여 접속하면 2줄의 데이터를 볼 수 있습니다. db에 접속하여 데이터를 추가하거나 삭제 후 새로고침하면 이전과는 다른 화면을 볼 수 있게 되었지요.</p>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://github.com/mysqljs/mysql" target="_blank" rel="external">mysql</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;h2 id=&quot;mysql-연결하기&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="mysql" scheme="http://hyc7575.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - express ejs 템플릿</title>
    <link href="http://hyc7575.github.io/2017/05/18/2017-05-18-express-ejs/"/>
    <id>http://hyc7575.github.io/2017/05/18/2017-05-18-express-ejs/</id>
    <published>2017-05-18T07:29:26.000Z</published>
    <updated>2017-05-29T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><h2 id="Render-ejs"><a href="#Render-ejs" class="headerlink" title="Render ejs"></a>Render ejs</h2><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><ul>
<li>project<ul>
<li>node_modules</li>
<li>views<ul>
<li>index.ejs</li>
<li>layout.ejs</li>
</ul>
</li>
<li>app.js</li>
<li>package.json</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">npm i --save express ejs express-ejs-layouts</div></pre></td></tr></table></figure>
<p>프로젝트 폴더에 접속하여 npm init으로 package.json 파일을 생성 후 express와 ejs, express-ejs-layouts를 설치합니다. express-ejs-layouts는 express에서 ejs의 다양한 layout 기능을 추가적으로 제공해줍니다.</p>
<ul>
<li>layout.ejs<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        *&#123;margin: 0; padding: 0;&#125;</div><div class="line">        html, body &#123;</div><div class="line">            height: 100%;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">        헤더영역</div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #dedede;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">body</span> %&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">        푸터영역</div><div class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">script</span> %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>view 페이지들의 layout 페이지입니다. <code>&lt;%- body %&gt;</code>부분에 컨텐츠가 들어가고, <code>&lt;%- script %&gt;</code>부분에 추출된 script 태그들이 들어갑니다. 설정 방법은 app.js에서 살펴보겠습니다.<br><del>code를 html형태로 했더니 하이라이팅이 조금 이상합니다 ㅠㅠ</del></p>
<ul>
<li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> expressLayouts = <span class="built_in">require</span>(<span class="string">'express-ejs-layouts'</span>);</div><div class="line">　</div><div class="line">app.set(<span class="string">'views'</span>,__dirname + <span class="string">'/views'</span>);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</div><div class="line">　</div><div class="line"><span class="comment">// ejs-layouts setting</span></div><div class="line">app.set(<span class="string">'layout'</span>, <span class="string">'layout'</span>);</div><div class="line">app.set(<span class="string">"layout extractScripts"</span>, <span class="literal">true</span>);</div><div class="line">app.use(expressLayouts);</div><div class="line">　</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'타이틀 입니다.'</span>,</div><div class="line">        <span class="attr">description</span>: <span class="string">'타이틀에 대한 설명이 들어오게 되겠지요?'</span></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>처음 등장하는 코드 위주로 알아보겠습니다.<br><code>app.set(&#39;views&#39;,__dirname + &#39;/views&#39;);</code> 이 코드는 view 파일들이 있는 경로를 설정하는 영역입니다. <code>__dirname</code>은 현재 app.js가 위치한 경로를 알려주는 Node.js의 전역변수인데, 우리는 이 코드를 통해서 app.js와 같은레벨에 있는 views 라는 폴더에 템플릿 파일들이 있다고 app에게 알려준 것 입니다.</p>
<p><code>app.set(&#39;view engine&#39;, &#39;ejs&#39;);</code> 템플릿 엔진 ejs 사용하겠다고 선언한 것입니다. 이 선언을 함으로써 우리는 <a href="http://expressjs.com/ko/4x/api.html#res.render" target="_blank" rel="external">res.render</a> 메소드에서 .ejs를 생략할 수 있게되었습니다.</p>
<p><code>app.set(&#39;layout&#39;, &#39;layout&#39;);</code> views/layout.ejs를 기본 레이아웃으로 설정합니다. layout.ejs의 <code>&lt;%- body %&gt;</code> 부분에 랜더링된 html 문자열이 들어갑니다.</p>
<p><code>app.set(&quot;layout extractScripts&quot;, true);</code> 랜더링된 html에서 모든 script태그를 추출합니다. 이 script태그들은 layout.ejs에서 <code>&lt;%- script %&gt;</code> 부분에 들어가게 됩니다.</p>
<p><code>res.render(&#39;index&#39;, [,locals], [,callback])</code> index.ejs 파일을 랜더링 합니다. locals는 객체형태이며 이 객체의 프로퍼티들은 랜더링 되는 view 페이지에서 변수로 사용이 가능합니다.</p>
<ul>
<li>index.ejs<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'script tag between h1 and p but..'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">description</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>app.js 실행 후 접속하면 완성된 결과를 볼 수 있습니다. express-ejs-layouts 모듈은 이 외에도 꽤 다양한 기능을 제공하고 있으니 <a href="https://github.com/Soarez/express-ejs-layouts" target="_blank" rel="external">링크</a>에 접속하여 한번 읽어보시기 바랍니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;h2 id=&quot;Render-ejs&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="ejs" scheme="http://hyc7575.github.io/tags/ejs/"/>
    
      <category term="ejs-layout" scheme="http://hyc7575.github.io/tags/ejs-layout/"/>
    
      <category term="layout" scheme="http://hyc7575.github.io/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - Router와 middleware</title>
    <link href="http://hyc7575.github.io/2017/05/16/2017-05-16-nodejs-express-router-middleware/"/>
    <id>http://hyc7575.github.io/2017/05/16/2017-05-16-nodejs-express-router-middleware/</id>
    <published>2017-05-16T08:50:00.000Z</published>
    <updated>2017-05-29T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p>express에서 router는 기본적으로 아래와 같은 형태를 가집니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.METHOD(PATH, HANDLER)</div></pre></td></tr></table></figure></p>
<ul>
<li>METHOD: http 요청 메서드</li>
<li>PATH: 경로(엔드포인트)</li>
<li>HANDLER: 실행될 함수</li>
</ul>
<p>몇가지 예를 들어보면</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/home'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'home 접속'</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'user에 대한 post 요청 처리'</span>);</div><div class="line">&#125;);</div><div class="line">app.put(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'user에 대한 put 요청 처리'</span>);</div><div class="line">&#125;);</div><div class="line">app.delete(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'user에 대한 delete 요청 처리'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>가장 많이 사용되는 4가지 http 메서드에 대한 예제입니다.<br>보시면 <code>/user</code> 경로가 중복되는 경우가 있는데 이럴 경우 <code>app.route(path)</code>를 사용할 수 있습니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app.route(<span class="string">'/user'</span>)</div><div class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">        res.send(<span class="string">'user에 대한 post 요청 처리'</span>);</div><div class="line">    &#125;)</div><div class="line">    .put(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">        res.send(<span class="string">'user에 대한 put 요청 처리'</span>);</div><div class="line">    &#125;)</div><div class="line">    .delete(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">        res.send(<span class="string">'user에 대한 delete 요청 처리'</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="express-Router"><a href="#express-Router" class="headerlink" title="express.Router"></a>express.Router</h3><p>라우터의 기본 사용방법을 보았으니 이를 모듈화 시키는 방법을 보겠습니다.</p>
<ul>
<li><p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./route'</span>); <span class="comment">// 모듈화된 router를 불러옵니다.</span></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">　</div><div class="line">app.use(router);</div><div class="line">　</div><div class="line"><span class="comment">// 1번쨰 매개변수로 받은 /hi에 대한 라우팅이 가능하도록 해줍니다. ex) /hi, /hi/about, /hi/user</span></div><div class="line"><span class="comment">// app.use('/hi', router);</span></div><div class="line">　</div><div class="line">app.listen(<span class="number">4000</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>route.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> router = express.Router();</div><div class="line">　</div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Home 접속'</span>);</div><div class="line">&#125;);</div><div class="line">router.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'About 접속'</span>);</div><div class="line">&#125;);</div><div class="line">router.post(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'user에 대한 post 요청'</span>);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>route.js 파일을 만들어서 router 모듈을 만들었습니다. 우리는 app.js에 router를 불러와 <a href="http://expressjs.com/ko/4x/api.html#app.use" target="_blank" rel="external">app.use()</a>를 통하여 지정된 경로에 미들웨어로 마운트한 것 입니다. (경로가 없다면 모든 요청시마다 실행합니다)</p>
<h2 id="Middleware-미들웨어"><a href="#Middleware-미들웨어" class="headerlink" title="Middleware(미들웨어)"></a>Middleware(미들웨어)</h2><p>express는 일련의 미들웨어(함수)들로 이루어져있습니다. 이 미들웨어는 요청, 응답 사이에서 부가적인 처리를 할 수 있고 다음 미들웨어의 실행권한을 가지게 됩니다. 이해가 부족한지 텍스트로 내용을 풀어쓰기가 쉽지가 않아 예제를 보는게 편할듯 합니다. <code>express.Router() 예제</code>에서 사용한 app.js를 이어서 사용하겠습니다.</p>
<ul>
<li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./route.js'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">　</div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    req.testValue = <span class="string">'안녕하세요.'</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1번'</span>);</div><div class="line">    next(); <span class="comment">// 다음 middleware 실행</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'2번'</span>);</div><div class="line">    next(); <span class="comment">// 다음 middleware 실행</span></div><div class="line">&#125;);</div><div class="line">　</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'home'</span>, req.testValue);</div><div class="line">    res.send(<span class="string">'Home'</span>);</div><div class="line">&#125;);</div><div class="line">app.use(<span class="string">'/path'</span>, router); <span class="comment">// '/path'로 시작하는 경로의 경우에만 실행됩니다.</span></div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>서버를 실행 시킨 뒤 <code>localhost:3000</code>에 접속하면 터미널에 3개의 콘솔이 찍힌 것을 볼 수 있습니다.</p>
<ul>
<li>terminal<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1번</div><div class="line">2번</div><div class="line">home 안녕하세요.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>작성한 미들웨어가 위에서부터 순차적으로 실행된다것과(중요!) <code>req.testValue</code>를 보아 미들웨어 스택내에서 같은 request, response를 공유하고 있다는 것을 알 수 있습니다.</p>
<p>여기서 사용한 <code>app.use()</code>가 미들웨어를 설정하는 부분인데, (app.METHOD도 미들웨어 설정이라고 볼 수 있음)<br>이 메서드는 <code>app.use([path,] callback [, callback...])</code>이러한 형태를 가지게 됩니다.<br>path가 생략되어있다면 모든 요청에서 callback이 실행되고, 그렇지 않다면 해당 path로 시작하는 요청에서 callback이 실행됩니다. 또한 각 미들웨어는 다음에 실행되는 미들웨어의 실행 권한을 가지고 있습니다. 일반적으로는 예제에서 사용한 next라는 이름의 변수를 사용합니다. <code>next()</code>를 호출하지 않는다면 다음 미들웨어를 실행하지 않게 되겠지요. 만약 응답을 보내주지도 않았다면 요청이 온 상태에서 멈춰버리게 됩니다. ( 파비콘자리에 빙글빙글 도는 로딩바를 보실 수 있습니다 ㅠㅠ )</p>
<p>지금까지 직접 미들웨어를 만드는 방법을 알아보았습니다. 이제는 express에서 기본으로 제공하는 미들웨어와 써드파티 미들웨어를 사용하는 법을 알아보려 합니다. 마찬가지로 app.js를 그대로 사용하겠습니다.</p>
<p>우선 npm을 통하여 모듈을 설치합니다.</p>
<ul>
<li><p>terminal</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save body-parser</div></pre></td></tr></table></figure>
</li>
<li><p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./route.js'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>); <span class="comment">// 설치한 모듈을 불러옵니다.</span></div><div class="line">　</div><div class="line"><span class="comment">// set static file directory</span></div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</div><div class="line"><span class="comment">// parse application/json</span></div><div class="line">app.use(bodyParser.json());</div><div class="line">　</div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    req.testValue = <span class="string">'안녕하세요.'</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1번'</span>);</div><div class="line">    next(); <span class="comment">// 다음 middleware 실행</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'2번'</span>);</div><div class="line">    next(); <span class="comment">// 다음 middleware 실행</span></div><div class="line">&#125;);</div><div class="line">　</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'home'</span>, req.testValue);</div><div class="line">    res.send(<span class="string">'Home'</span>);</div><div class="line">&#125;);</div><div class="line">app.use(<span class="string">'/path'</span>, router); <span class="comment">// '/path'로 시작하는 경로의 경우에만 실행됩니다.</span></div><div class="line">　</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>express가 4.X 버전에 올라오면서 <code>express.static</code>을 제외한 기본 미들웨어들은 모두 별도의 모듈로 분리 되었습니다. 7번줄에서 사용한 이 메서드는 정적파일들을 제공해주는 역할을 합니다. 지난번 예제에서 <code>staticMap</code>을 만들어서 확장자에 따른 각 헤더값을 정해주는 작업을 이제는 하지 않아도 되는 것이지요.</p>
<p>다음으로는 써드파트 미들웨어입니다. npm을 통하여 사용할 모듈을 설치하고 app.use() 를 통해 미들웨어로써 마운트한 것입니다. 예제에서는 <a href="https://github.com/expressjs/body-parser" target="_blank" rel="external">body-parser</a>라는 모듈을 설치하였는데 이 모듈은 요청 바디를 파싱하여서 req.body 객체로 접근할 수 있도록 도와줍니다. <code>bodyParser.urlencoded()</code>는 헤더의 Content-Type이 <code>application/x-www-form-urlencoded</code>일 경우(form태그의 기본 인코딩 타입이다)에 대한 파싱을 해주고, <code>bodyParser.json()</code>은 마찬가지로 Content-Type이 <code>application/json</code>일 경우에 대한 파싱을 해줍니다. 추가로 bodyParser.urlencoded의 옵션으로 들어가는 extended는 값에 따라서 데이터 파싱을 <code>querystring</code> 라이브러리를 사용하는지 <code>qs</code> 라이브러리로 하는지의 차이를 가지고 있다고 합니다. 자세한 내용은 하단 참고링크를 걸어두겠습니다.</p>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul>
<li><a href="http://expressjs.com/ko/guide/using-middleware.html#middleware.application" target="_blank" rel="external">미들웨어</a></li>
<li><a href="https://github.com/expressjs/body-parser" target="_blank" rel="external">body-parser</a> - urlencoded를 검색</li>
<li><a href="http://stackoverflow.com/questions/29175465/body-parser-extended-option-qs-vs-querystring" target="_blank" rel="external">body-parser(qs vs querystring)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;h2 id=&quot;Router&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
      <category term="Router" scheme="http://hyc7575.github.io/tags/Router/"/>
    
      <category term="middleware" scheme="http://hyc7575.github.io/tags/middleware/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(express) - express 프레임워크</title>
    <link href="http://hyc7575.github.io/2017/05/13/2017-05-13-Nodejs-express/"/>
    <id>http://hyc7575.github.io/2017/05/13/2017-05-13-Nodejs-express/</id>
    <published>2017-05-13T04:47:37.000Z</published>
    <updated>2017-05-29T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>express.js는 Node.js에서 사용하는 웹 앱 프레임워크입니다.<br>처음 express를 접해보았을 때는 버전이 3.X 가 나온지 얼마 안되었을 때 같은데 어느새 4.X로 올라왔고 Connect 모듈에 대한 종속성이 사라졌다고 합니다. ( 3.X -&gt; 4.X로 버전 업을 할 경우 Connect에 종속된 미들웨어는 따로 처리를 해주셔야 합니다. )</p>
<h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir express-exam01</div><div class="line">cd express-exam01</div></pre></td></tr></table></figure>
<p>express 설치할 폴더를 생성 후 해당 폴더로 이동합니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<p>npm init을 통해 해당 폴더를 npm project로 만들고 package.json을 생성합니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i express --save</div></pre></td></tr></table></figure>
<p>npm을 이용하여 express를 설치 save 옵션을 통해 package.json의 dependencies에 express를 추가해줍니다. ( 임시로 사용할 것 이라면 save 옵션을 주지 않아도 괜찮습니다 )</p>
<h3 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h3><p>express-exam01폴더에 app.js를 생성합니다.</p>
<ul>
<li>app.js  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">　</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'생성 완료'</span>);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">4000</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>터미널을 통해 app.js를 실행 후 <code>localhost:4000</code>을 접속하면 웹 서버가 정상적으로 동작하는 것을 확인할 수 있습니다.</p>
<p><code>express()</code>를 통하여 express 어플리케이션을 객체를 반환 합니다. 우리는 반환된 객체를 통해서 어플리케이션을 작성합니다.<br>4번 라인의 <a href="http://expressjs.com/ko/4x/api.html#app.get" target="_blank" rel="external">app.get</a> 메서드를 사용하여 http get요청에 대한 route를 정의하였고, 5번라인의 <a href="http://expressjs.com/ko/4x/api.html#res.send" target="_blank" rel="external">res.send</a>는 http 응답을 보내는 역할을 해줍니다. 특징이라면 헤더를 자동으로 지정해줍니다. 7번 라인의 <a href="http://expressjs.com/ko/4x/api.html#app.listen" target="_blank" rel="external">app.listen</a> 메서드를 사용하여 서버를 실행 시켰습니다. http 모듈의 listen과 동일한 기능을 수행합니다.</p>
<!--
> Express는 자체적인 최소한의 기능을 갖춘 라우팅 및 미들웨어 웹 프레임워크이며, Express 애플리케이션은 기본적으로 일련의 미들웨어 함수 호출입니다. -->
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;h2 id=&quot;express&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="express" scheme="http://hyc7575.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>Node.js - Router 및 static file serve</title>
    <link href="http://hyc7575.github.io/2017/05/11/2017-05-11-Nodejs-route/"/>
    <id>http://hyc7575.github.io/2017/05/11/2017-05-11-Nodejs-route/</id>
    <published>2017-05-11T06:51:32.000Z</published>
    <updated>2017-05-29T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><h2 id="라우팅"><a href="#라우팅" class="headerlink" title="라우팅"></a>라우팅</h2><p>라우팅은 Http 요청 메소드(GET, POST 등)에 대한 요청을 어플리케이션이 응답하는 방법을 결정하는 것을 말합니다. 웹 페이지에 접속하는 것 또한 어플리케이션에 GET요청을 보내는 것 이지요.</p>
<h2 id="static-파일"><a href="#static-파일" class="headerlink" title="static 파일"></a>static 파일</h2><p>static 파일(정적 파일)은 html, css, image, js 와 같이 내용이 변함없이 고정 되어서 별도의 작업을 하지 않고 그대로 보내줄 수 있는 파일을 의미합니다.</p>
<h2 id="Routing-amp-Serve-static-file-with-node-js"><a href="#Routing-amp-Serve-static-file-with-node-js" class="headerlink" title="Routing &amp; Serve static file with node js"></a>Routing &amp; Serve static file with node js</h2><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><ul>
<li>project<ul>
<li>public<ul>
<li>css<ul>
<li>styles.css</li>
</ul>
</li>
<li>images<ul>
<li>image.jpg</li>
</ul>
</li>
</ul>
</li>
<li>views<ul>
<li>404.html</li>
<li>about.html</li>
<li>index.html</li>
</ul>
</li>
<li>app.js</li>
<li>requestHandlers.js</li>
<li>router.js</li>
<li>server.js</li>
</ul>
</li>
</ul>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><ul>
<li><p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">'./server'</span>);</div><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</div><div class="line"><span class="keyword">const</span> requestHandlers = <span class="built_in">require</span>(<span class="string">'./requestHandlers'</span>);</div><div class="line">　</div><div class="line"><span class="keyword">var</span> handle = &#123;&#125;</div><div class="line">handle[<span class="string">'/'</span>] = requestHandlers.home;</div><div class="line">handle[<span class="string">'/about'</span>] = requestHandlers.about;</div><div class="line">　</div><div class="line">server.start(router.route, handle);</div></pre></td></tr></table></figure>
<p>  필요로하는 모든 기능을 app.js에서 수행하기에는 너무 넓은 영역입니다. 각 기능들을 common.js 표준인 <code>exports</code>, <code>module.exports</code>를 통해 모듈화하여서 <code>require</code>을 통해 불러옵니다. 그리고 handle 객체를 만들어서 server를 실행 시키는 함수에 route함수와 함께 넘겨줍니다. 이 handle객체의 key값은 요청 메서드의 경로입니다.</p>
</li>
<li><p>server.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">　</div><div class="line"><span class="keyword">const</span> start = <span class="function">(<span class="params">route, handle</span>) =&gt;</span> &#123;</div><div class="line">    http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> pathname = url.parse(req.url).pathname;</div><div class="line">        route(handle, pathname, res, req);</div><div class="line">    &#125;).listen(<span class="number">4000</span>);</div><div class="line">&#125;</div><div class="line">　</div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>
<p>  여태까지는 createServer메서드의 매개변수로 주고있는 request 이벤트 핸들러에서 response(응답)을 처리하였지만, 이제는 route 함수로 response 객체와 handler 들을 넘겨줍니다.</p>
</li>
<li><p>router.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">// file 경로를 다루기 위한 모듈 (기본)</span></div><div class="line">　</div><div class="line"><span class="keyword">const</span> route = <span class="function">(<span class="params">handle, pathname, res, req</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> extension = path.extname(pathname); <span class="comment">// 확장자를 구하는 메서드</span></div><div class="line">    <span class="keyword">const</span> staticMap = &#123;</div><div class="line">        <span class="string">'.ico'</span>: <span class="string">'image/x-icon'</span>,</div><div class="line">        <span class="string">'.html'</span>: <span class="string">'text/html'</span>,</div><div class="line">        <span class="string">'.js'</span>: <span class="string">'text/javascript'</span>,</div><div class="line">        <span class="string">'.json'</span>: <span class="string">'application/json'</span>,</div><div class="line">        <span class="string">'.css'</span>: <span class="string">'text/css'</span>,</div><div class="line">        <span class="string">'.png'</span>: <span class="string">'image/png'</span>,</div><div class="line">        <span class="string">'.jpg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">        <span class="string">'.mp3'</span>: <span class="string">'audio/mpeg'</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> staticPath = __dirname + <span class="string">'/public'</span>;</div><div class="line">　</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">'function'</span>) &#123;</div><div class="line">        handle[pathname](res, req);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>( staticMap[extension] ) &#123;</div><div class="line">            <span class="comment">//static file</span></div><div class="line">            fs.readFile( staticPath + pathname, (err, data) =&gt; &#123;</div><div class="line">                res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: staticMap[extension]&#125;);</div><div class="line">                res.end(data);</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fs.readFile(<span class="string">'./views/404.html'</span>, (err, data) =&gt; &#123;</div><div class="line">                res.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">                res.end(data);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">　</div><div class="line">exports.route = route;</div></pre></td></tr></table></figure>
<p>  route는 pathname과 일치하는 handler를 가지고 있다면 handle 함수로 다시 response(응답) 객체를 넘겨주고 그렇지 않다면 여기서 처리해줍니다. handler가 가지고 있지 않는 경우라하면 요청이 static 파일이거나 혹은 유효하지 않은 요청을 하였을 경우입니다.<br>  staticMap을 만들어서 static 파일들일 경우와 아닐 경우를 한번 더 분기 해줍니다.</p>
</li>
<li><p>requestHandlers.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">　</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">home</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">        fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</div><div class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">            res.end(data)</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">about</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">        fs.readFile(<span class="string">'./views/about.html'</span>, (err, data) =&gt; &#123;</div><div class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">            res.end(data);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  라우터에서 호출된 각 handler들은 html파일을 읽어서 넘겨받은 response객체를 통해 브라우저에 보내주는 역할을 하게 됩니다.</p>
</li>
<li><p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/styles.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/about"</span>&gt;</span>About으로 이동<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/image.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  <code>localhost:4000</code>을 접속하면 pathname은 <code>/</code>로 정의됩니다, 우리가 라우터로 넘겨준 handle객체에서 <code>/</code> 라는 값은 requestHandlers.js의 home이라는 function을 호출하기 때문에 index.html을 응답해줄 수 있습니다. 반대로 이 index.html에서 요청하는 styles.css와 image.jpg는 handle객체가 가지고 있지 않은 값 이지만 staticMap을 통해서 static한 파일임을 알 수 있으므로 정상적인 헤더값을 정의해줄 수 있게 됩니다.</p>
</li>
</ul>
<p>about.html과 404.html또한 views 폴더에 생성한 뒤  app.js를 실행합니다.<br><code>localhost:4000</code>을 접속하면 index.html<br><code>localhost:4000/about</code>을 접속하면 about.html<br><code>localhost:4000/abc123</code>을 접속하면 404.html 을 보여주는 것을 확인할 수 있습니다.</p>
<hr>
<h2 id="맺음"><a href="#맺음" class="headerlink" title="맺음"></a>맺음</h2><p>Node.js의 기본 모듈만을 사용하여 Router와 static 파일들을 제공하는 방법을 알아보았습니다. 외부모듈이나 express와 같은 framework를 사용하면 더 쉽게 사용할 수 있었겠지만 이 부분은 차차 공부해볼려 합니다.</p>
<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="http://danialk.github.io/blog/2013/01/23/simple-node-server/" target="_blank" rel="external">Simple node server</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;h2 id=&quot;라우팅&quot;&gt;&lt;a href=&quot;#라우팅
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
      <category term="route" scheme="http://hyc7575.github.io/tags/route/"/>
    
      <category term="router" scheme="http://hyc7575.github.io/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>Node.js - File System 모듈(readFile)</title>
    <link href="http://hyc7575.github.io/2017/05/09/2017-05-09-nodeJs-fs-module/"/>
    <id>http://hyc7575.github.io/2017/05/09/2017-05-09-nodeJs-fs-module/</id>
    <published>2017-05-09T11:04:00.000Z</published>
    <updated>2017-05-29T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><h2 id="fs-모듈"><a href="#fs-모듈" class="headerlink" title="fs 모듈"></a>fs 모듈</h2><p>Node.js 는 fs(file system) 모듈을 이용하여 파일과 디렉토리에 관련된 작업을 할 수 있습니다. 이 fs 모듈의 모든 메서드들은 동기/비동기 양식을 지원하고 있습니다. 동기 방식은 값을 함수에서 바로 return 해주지만 single thread를 사용하는 Node.js는 이 작업이 실행되는 동안은 다른 작업이 실행되는것을 막습니다. 비동기 방식은 다른 작업이 실행되는 것을 막지는 않지만 보장된 순서가 없어 오류가 발생하기 쉽습니다. 어떠한 방식을 사용할지는 경우에따라 본인 판단 후 사용하도록 합시다.</p>
<h2 id="html-읽기"><a href="#html-읽기" class="headerlink" title="html 읽기"></a>html 읽기</h2><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><ul>
<li>project<ul>
<li>app.js</li>
<li>index.html</li>
</ul>
</li>
</ul>
<h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><ul>
<li><p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>안녕하세요.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">　</div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    fs.readFile(<span class="string">'index.html'</span>, (err, data) =&gt; &#123;</div><div class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">        res.end(data);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">　</div><div class="line">server.listen(<span class="number">4000</span>, () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'server running'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>app.js 를 실행 후 <code>localhost:4000</code> 을 접속하면 index.html 페이지를 볼 수 있을 것 입니다.</p>
<hr>
<h2 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h2><ol>
<li><p><a href="https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback" target="_blank" rel="external">readFile</a><br> 비동기 방식으로 파일을 읽는 메서드 입니다. file, option, callback 3개의 매개변수를 가지며 callback 을 통하여 error 또는 data를 반환합니다.<br> data는 기본적으로 Buffer 객체를 반환 하지만 option을 통하여 encoding type을 지정할 수 있습니다.<br> <code>fs.readFile(&#39;index.html&#39;, &#39;utf-8&#39;, (err, data) =&gt; {});</code> 이와 같이 encoding type을 utf-8로 변환 후 console.log 를 통하여 data를 찍어보면 html 파일을 string 형태로 보여줄 것 입니다.</p>
</li>
<li><p>writeHead<br> 시작하기에서 언급했듯이 응답값의 헤더를 작성합니다. 이전 예제에서와는 다르게 html 문서를 응답해주므로 <code>Content-Type</code> 을 text/html로 작성하였습니다.<br> 이는 MIME 형식에서 정의한 문자열 입니다. 자세한 내용은 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types" target="_blank" rel="external">링크</a>를 참조</p>
</li>
<li><p>end<br> end 메서드가 data를 가지고 있는경우 <code>response.write(data);</code> 를 실행 후 end를 호출 한 것 과 같은 효과를 줍니다. <a href="https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_response_write_chunk_encoding_callback" target="_blank" rel="external">write</a> 메서드는 응답 body에 chunk를 보내주는 역할을 합니다.</p>
</li>
</ol>
<p>가장 자주 쓰이는 파일을 읽는 방법만 알아보았지만 이 외에도 생성, 삭제, 이름변경 등 많은 기능들을 제공하니 api 문서를 참조해보시기를 바랍니다.<br><a href="https://nodejs.org/dist/latest-v6.x/docs/api/fs.html" target="_blank" rel="external">docs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;h2 id=&quot;fs-모듈&quot;&gt;&lt;a href=&quot;#f
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 시작하기</title>
    <link href="http://hyc7575.github.io/2017/05/06/2017-05-06-NodeJs-start/"/>
    <id>http://hyc7575.github.io/2017/05/06/2017-05-06-NodeJs-start/</id>
    <published>2017-05-06T10:24:20.000Z</published>
    <updated>2017-05-29T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png"/><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>Node js 공식 <a href="https://nodejs.org/ko" target="_blank" rel="external">홈페이지</a> 에서 설치,<br>이 외 여러 package manager를 사용하여 설치가 가능합니다. <a href="https://nodejs.org/ko/download/package-manager/" target="_blank" rel="external">참조</a></p>
<hr>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Node.js 어플리케이션은 javascript로 구현되며, .js 확장자를 사용합니다.<br>http 통신을 하는 hello world 어플리케이션을 만들기 위해 app.js 파일을 생성합니다.</p>
<ul>
<li>app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>); <span class="comment">// http 모듈을 불러온다.</span></div><div class="line"><span class="keyword">const</span> port = <span class="number">4000</span>;</div><div class="line">　</div><div class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">    res.end(<span class="string">'Hello World'</span>);</div><div class="line">&#125;).listen(port, () =&gt; &#123;</div><div class="line">    <span class="comment">// callback</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'server running'</span>);    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Node.js 6.x 는 es6의 지원이 원활 하므로 var 이 아닌 const 를 사용 하였습니다. (자세한 사항은 <a href="http://node.green/" target="_blank" rel="external">http://node.green/</a> 를 참조)</p>
<ul>
<li>terminal<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node app</div></pre></td></tr></table></figure>
</li>
</ul>
<p>app.js 를 생성 후 터미널에 접속하여 node 실행 명령어를 입력합니다.<br><code>server running</code> 이라는 표시가 뜰 것 이고 <code>localhost:4000</code> 에 접속하면 hello world 어플리케이션이 완성 되어있는 것을 볼 수 있습니다.</p>
<hr>
<h2 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h2><ol>
<li><p>http 모듈<br> app.js 의 1번 line을 보면 <code>require(&#39;http&#39;);</code> 를 통하여 http라는 변수(상수)에 선언합니다. http 모듈은 HTTP 웹 서버와 관련된 기능들을 담은 모듈로써 동작됩니다.</p>
</li>
<li><p>http.createServer()<br> http 객체의 <code>createServer</code> 메서드는 server 객체를 생성하도록 해줍니다.<br> 반환된 server 객체는 listen, close 메서드를 사용하여 서버를 실행, 종료 할 수 있고, 그 외 request, connection, close 등의 이벤트를 연결할 수 있습니다.</p>
</li>
<li><p>requestListener<br> 위에서 언급한 server 객체의 request(요청) 이벤트 핸들러는 따로 지정할 필요 없이 app.js 의 예제와 같이, <code>createServer</code> 메서드의 매개변수로 넘겨 줄 수 있습니다. 이 이벤트는 request와 response 라는 객체를 매개변수로 전달 받습니다.<br> 그 중 response 객체의 <a href="https://nodejs.org/api/http.html#http_response_writehead_statuscode_statusmessage_headers" target="_blank" rel="external">writeHead</a>는 요청에 대한 응답 헤더를 작성하고, <a href="https://nodejs.org/api/http.html#http_response_end_data_encoding_callback" target="_blank" rel="external">end</a>는 응답헤더와 본문이 전달 되었음을 server에 알려줍니다(end 메서드는 각 응답마다 반드시 호출 되어야 합니다).</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cloud.githubusercontent.com/assets/14171723/25853095/7bf3be3a-3506-11e7-8421-0a2287dd6278.png&quot;/&gt;&lt;h2 id=&quot;설치&quot;&gt;&lt;a href=&quot;#설치&quot; 
    
    </summary>
    
      <category term="Node.js" scheme="http://hyc7575.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="http://hyc7575.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://hyc7575.github.io/tags/nodejs/"/>
    
      <category term="javascript server" scheme="http://hyc7575.github.io/tags/javascript-server/"/>
    
      <category term="server" scheme="http://hyc7575.github.io/tags/server/"/>
    
  </entry>
  
</feed>
